<style>
  .profile-sub {
    padding: 0 50px 30px;
    font-family: 'Alata', sans-serif !important;
    color: #222222;
  }

  .section-spacing-block,
  .shopify-section,
  .section {
    padding: 0 !important;
  }

  .profile-sub__container {
    max-width: 1356px;
    border-top: 1px solid rgba(34, 34, 34, 0.5);
    margin: 0 auto;
    display: flex;
  }

  .profile-sub__col-left {
    /* border: 1px solid red; */
    min-width: 240px;
    padding: 0 15px;
  }

  .profile-sub__col-right {
    width: 100%;
  }

  .profile-sub__info-block {
    display: flex;
    gap: 18px;
    padding: 27px 0 25px;
  }

  .profile-sub__menu-container {
    display: flex;
    flex-direction: column;
    gap: 30px;
  }

  .profile-sub__menu-list {
    margin: 0;
    padding: 0;
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .profile-sub__menu-item {
    text-transform: capitalize;
    transition: all 0.3s ease;
  }

  .profile-sub__menu-item:hover {
    color: rgba(34, 34, 34, 0.5);
  }

  .profile-sub__image-block {
    min-width: 50px;
    height: 50px;
    border: 1px solid #222222;
    overflow: hidden;
  }

  .profile-sub__info-desc {
    font-size: 10px;
    display: block;
    color: rgba(34, 34, 34, 0.5);
  }
  .profile-sub__info-desc--name {
    font-size: 14px;
    display: block;
    text-transform: capitalize;
  }

  .profile-sub__order-heading-wrap {
    display: flex;
    justify-content: space-between;
    padding: 44px 40px 37px 13px;
  }

  .profile-sub__order-heading {
    font-size: 30px;
    font-weight: 400;
    line-height: 20px;
  }

  .profile-sub__order-container {
    margin: 0 30px 0 10px;
    padding: 0 35px 0 30px;
    border: 1px solid rgba(34, 34, 34, 0.5);
    box-shadow: 0px 1px 5px rgba(34, 34, 34, 0.2);
  }

  .profile-sub__order-block {
    padding: 17px 0 18px;
  }

  .profile-sub__order-block:not(:first-child) {
    border-top: 1px solid rgba(34, 34, 34, 0.2);
  }

  .profile-sub__order-block-list {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 22px;
    padding: 0;
  }

  .profile-sub__order-block-item {
    /* border: 1px solid green; */
    list-style: none;
    display: flex;
    gap: 16px;
  }

  .profile-sub__order-button-container {
    display: flex;
    justify-content: space-between;
    padding-top: 12px;
  }

  .profile-sub__order-img-wrap {
    min-width: 100px;
    height: 100px;
    /* border: 1px solid; */
  }

  .profile-sub__order-cat-wrap {
    display: flex;
    justify-content: space-between;
  }

  .profile-sub__order-cat-link {
    text-decoration: none;
    text-transform: uppercase;
    font-size: 14px;
    padding: 24px 0 16px;
    transition: all 0.3s ease;
  }

  .profile-sub__order-cat-link:hover {
    border-bottom: 1px solid #222222;
  }

  .profile-sub__order-cat-link--active {
    border-bottom: 1px solid #222222;
  }

  .profile-sub__order-button-wrap {
    display: flex;
    gap: 8px;
  }

  .profile-sub__order-btn-link {
    width: 130px;
    height: 45px;
    text-decoration: none;
    text-transform: uppercase;
    border: 1px solid #000;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #fff;
    background-color: #000;
    transition: all 0.3s ease;
    font-size: 14px;
    letter-spacing: 1px;
    padding-top: 5px;
  }

  .profile-sub__order-btn-link--sub {
    width: fit-content;
    padding: 10px 20px;
  }

  .profile-sub__order-btn-link:hover {
    color: #000;
    background-color: #fff;
  }

  .profile-sub__order-btn-link--white {
    color: #000;
    background-color: #fff;
  }

  .profile-sub__order-desc-wrap span {
    display: block;
  }

  .profile-sub__order-filer {
    display: flex;
    align-items: center;
    font-size: 10px;
    color: rgba(34, 34, 34, 0.5);
  }

  .profile-sub__order-date-wrap {
    display: flex;
  }

  .profile-sub__order-date-wrap span {
    font-size: 12px;
    color: rgba(34, 34, 34, 0.5);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 12px;
    display: flex;
  }

  .profile-sub__order-date {
    padding-right: 10px;
    border-right: 1px solid rgba(34, 34, 34, 0.5);
  }
  .profile-sub__order-status {
    padding-left: 10px;
  }

  .profile-sub__order-item-name {
    font-size: 14px;
    line-height: 20px;
  }

  .profile-sub__order-item-variant,
  .profile-sub__order-item-qty,
  .profile-sub__order-item-price,
  .profile-sub__order-item-sub-note {
    font-family: 'Poppins', sans-serif !important;
    font-size: 12px;
    line-height: 20px;
  }

  .profile-sub__order-item-sub {
    font-size: 8px;
    letter-spacing: 1px;
    line-height: 20px;
    color: #ff2c2c;
    padding: 0 5px;
    border: 1px solid #ff2c2c;
    width: fit-content;
    text-transform: uppercase;
  }

  .profile-sub__order-ttl-wrap {
    display: flex;
    align-items: center;
  }

  .profile-sub__order-ttl-txt {
    font-size: 14px;
    text-transform: uppercase;
    padding-right: 10px;
    letter-spacing: 1px;
  }

  .profile-sub__order-ttl-price {
    font-size: 24px;
    letter-spacing: 1px;
  }

  /* 
    font-family: "Alata", sans-serif !important;
    font-family: "Poppins", sans-serif !important;
    */
</style>

<div class="profile-sub">
  <div class="profile-sub__container">
    <div class="profile-sub__col-left">
      <div class="profile-sub__info-block">
        <div class="profile-sub__image-block">
          <img
            src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/person-img_2.png?v=1745996393"
            alt=""
            class="profile-sub__profile-picture"
            width="50"
            height="50"
          >
        </div>
        {% if customer %}
          <div class="profile-sub__info-block-wrap">
            <span class="profile-sub__info-desc profile-sub__info-desc--name" style="color: black;">
              {{ customer.first_name }}
              {{ customer.last_name }}
            </span>
            <span class="profile-sub__info-desc">
              {{ customer.phone }}
            </span>
            <span class="profile-sub__info-desc">
              {{ customer.email }}
            </span>
          </div>
        {% endif %}
      </div>
      <div class="profile-sub__menu-container">
        <ul class="profile-sub__menu-list">
          <li class="profile-sub__menu-item">
            <a href="/pages/profile">My Orders</a>
          </li>
          <li class="profile-sub__menu-item">
            <a href="/pages/profile-subscription">My Subscriptions</a>
          </li>
        </ul>
        <ul class="profile-sub__menu-list">
          <li class="profile-sub__menu-item">
            <a href="/pages/profile-my-account">My Account</a>
          </li>
          <li class="profile-sub__menu-item">
            <a href="/pages/my-wishlist">My Wishlist</a>
          </li>
        </ul>
        <ul class="profile-sub__menu-list">
          <li class="profile-sub__menu-item">
            <a href="#">policies</a>
          </li>
          <li class="profile-sub__menu-item">
            <a href="#">Sign Out</a>
          </li>
        </ul>
      </div>
    </div>

    <div class="profile-sub__col-right">
      <div class="profile-sub__order-heading-wrap">
        <h2 class="profile-sub__order-heading">My Wishlist</h2>
        <div class="profile-sub__order-filer">
          <select>
            <option>5–10 ITEMS</option>
            <option>10–20 ITEMS</option>
            <option>20–30 ITEMS</option>
          </select>
        </div>
      </div>

      <div class="profile-sub__order-container" style="padding-top: 20px; padding-bottom: 20px;">
        <div id="wishlist-container" style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px;">
          <!-- Wishlist items will be dynamically inserted here -->
          <div
            id="empty-wishlist-message"
            style="grid-column: span 4; text-align: center; padding: 50px 0; display: none;"
          >
            <p style="font-size: 16px;">Your wishlist is empty.</p>
            <a href="/collections/all" class="profile-sub__order-btn-link" style="margin: 20px auto;"
              >BROWSE PRODUCTS</a
            >
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Quick Add Modal -->
<div id="quick-add-modal" class="x:fixed x:inset-0 x:bg-black/50 x:z-50 x:hidden x:items-center x:justify-center">
  <div class="x:bg-white x:p-10 x:rounded x:min-w-2xl x:relative x:overflow-y-auto">
    <button
      id="close-modal"
      class="x:absolute x:top-4 x:right-4 x:text-black x:text-xl x:font-bold x:hover:text-gray-500"
    >
      &times;
    </button>

    <div class="x:flex x:flex-col x:gap-4">
      <h3 id="modal-product-title" class="x:text-3xl x:font-medium"></h3>

      <div class="x:flex x:flex-col x:gap-2">
        <div class="x:flex x:items-center x:gap-3">
          <div class="x:flex x:items-center x:gap-1">
            <span>5.0</span>
            <span class="x:flex x:items-center x:gap-1">
              {% render 'icon', icon: 'rating-star' %}
              {% render 'icon', icon: 'rating-star' %}
              {% render 'icon', icon: 'rating-star' %}
              {% render 'icon', icon: 'rating-star' %}
              {% render 'icon', icon: 'rating-star' %}
            </span>
          </div>

          <span>3 reviews</span>
        </div>
        <span
          >Available for <span class="x:capitalize x:underline">pickup</span> and
          <span class="x:capitalize x:underline">delivery</span></span
        >
      </div>

      <hr>

      <div class="x:flex x:flex-col x:gap-1">
        <div class="x:flex x:items-center x:gap-1">
          <span>Product Code: </span>
          <span>4014</span>
        </div>
        <div class="x:flex x:items-center x:gap-1">
          {% render 'icon', icon: 'map-pin' %}
          <span class="x:underline">See It In Person</span>
        </div>
      </div>

      <!-- Variant Swatches (placeholder) -->
      <div style="display: flex; gap: 6px;" id="modal-swatches">
        <!-- Swatches will be copied from product card -->
      </div>

      <hr>

      <div class="x:flex x:flex-col x:gap-2" id="modal-variants">
        {% comment %}Variants will be dynamically inserted here{% endcomment %}
      </div>

      <hr>

      <div class="x:w-full x:flex x:justify-between">
        <div class="x:flex x:items-center x:border x:border-gray-300 x:rounded x:w-24">
          <button id="decrease-qty" class="x:px-2 x:py-1 x:text-lg x:font-medium">-</button>
          <span id="modal-product-quantity" class="x:w-12 x:text-center x:py-1">1</span>
          <button id="increase-qty" class="x:px-2 x:py-1 x:text-lg x:font-medium">+</button>
        </div>
    
        <p id="modal-product-price" class="x:text-lg x:font-medium"></p>
      </div>

      <div class="x:flex x:flex-col x:gap-2 x:mt-4">
        <button id="modal-add-to-cart" class="profile-sub__order-btn-link x:w-full">ADD TO CART</button>
        <div class="x:flex x:gap-2">
          <button
            id="modal-add-to-wishlist"
            class="profile-sub__order-btn-link profile-sub__order-btn-link--white x:w-full"
          >
            ADD TO WISHLIST
          </button>
          <button id="modal-subscribe" class="profile-sub__order-btn-link profile-sub__order-btn-link--white x:w-full">
            SUBSCRIBE AND SAVE
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const links = document.querySelectorAll(".profile-sub__order-cat-link");
    
    // Render wishlist items
    renderWishlistItems();
    
    // Listen for wishlist updates
    document.addEventListener('wishlist:updated', function(event) {
      renderWishlistItems();
    });

    // Modal elements
    const modal = document.getElementById('quick-add-modal');
    const closeModal = document.getElementById('close-modal');
    const modalTitle = document.getElementById('modal-product-title');
    
    let currentProduct = null;

    // Ensure modal is hidden initially
    if (modal) {
      modal.style.display = 'none';
      modal.classList.remove('x:flex');
      modal.classList.add('x:hidden');
    }
    
    // Close modal when clicking the close button or outside the modal
    if (closeModal) {
      closeModal.addEventListener('click', () => {
        modal.classList.remove('x:flex');
        modal.classList.add('x:hidden');
        modal.style.display = 'none';
      });
    }
    
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.remove('x:flex');
        modal.classList.add('x:hidden');
        modal.style.display = 'none';
      }
    });

    // Add click event listeners to cart icons
    function addCartIconListeners() {
      document.querySelectorAll('.cart-icon').forEach(icon => {
        icon.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          const productId = this.getAttribute('data-product-id');
          const wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
          const product = wishlist.find(item => item.id === productId);
          
          if (product) {
            openProductModal(product);
          }
        });
      });
    }
    
    function openProductModal(product) {
      console.log('openProductModal called with:', product);
      if (!modal || !modalTitle) {
        console.error('Modal elements not found:', { modal, modalTitle });
        return;
      }
      
      currentProduct = product;
      
      // Set basic content
      modalTitle.textContent = product.title;
      
      // Set price
      const modalPrice = document.getElementById('modal-product-price');
      if (modalPrice) {
        modalPrice.textContent = typeof product.price === 'number' ? 
          `$${(product.price / 100).toFixed(2)}` : 
          product.price;
      }

      // Set variants
      const modalVariants = document.getElementById('modal-variants');
      if (modalVariants && product.variants) {
        let variantsHtml = '';
        
        // Group variants by option name (e.g., "Size", "Color", etc.)
        const variantGroups = {};
        product.variants.forEach(variant => {
          if (variant.option2) {
            if (!variantGroups[variant.option2_name || 'Color']) {
              variantGroups[variant.option2_name || 'Color'] = new Set();
            }
            variantGroups[variant.option2_name || 'Color'].add(variant.option2);
          }
          if (variant.option3) {
            if (!variantGroups[variant.option3_name || 'Material']) {
              variantGroups[variant.option3_name || 'Material'] = new Set();
            }
            variantGroups[variant.option3_name || 'Material'].add(variant.option3);
          }
        });

        // Create HTML for each variant group
        Object.entries(variantGroups).forEach(([groupName, values]) => {
          variantsHtml += `
            <div class="x:flex x:flex-col x:gap-2">
              <span class="x:text-lg x:font-medium">${groupName}</span>
              <div class="x:flex x:flex-col x:flex-wrap x:gap-2">
                ${Array.from(values).map(value => `
                  <div class="x:flex x:items-center x:gap-2">
                    <input
                      type="checkbox"
                      class="variant-option x:h-5 x:w-5 x:appearance-none x:border x:border-gray-300 x:rounded x:checked:bg-black x:checked:border-black x:bg-center x:bg-no-repeat x:checked:bg-[url('data:image/svg+xml;charset=utf-8,%3Csvg%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2016%2016%22%3E%3Cpath%20d%3D%22M12.207%204.793a1%201%200%20010%201.414l-5%205a1%201%200%2001-1.414%200l-2-2a1%201%200%20011.414-1.414L6.5%209.086l4.293-4.293a1%201%200%20011.414%200z%22%20fill%3D%22%23fff%22%2F%3E%3C%2Fsvg%3E')]"
                      data-option-name="${groupName}"
                      data-option-value="${value}"
                    >
                    <label class="x:text-base">${value}</label>
                  </div>
                `).join('')}
              </div>
            </div>
          `;
        });

        modalVariants.innerHTML = variantsHtml;

        // Add event listeners to variant checkboxes
        modalVariants.querySelectorAll('.variant-option').forEach(checkbox => {
          checkbox.addEventListener('change', function() {
            // Uncheck other checkboxes in the same group
            const groupCheckboxes = modalVariants.querySelectorAll(`input[data-option-name="${this.dataset.optionName}"]`);
            groupCheckboxes.forEach(cb => {
              if (cb !== this) cb.checked = false;
            });

            // Update selected variant and price
            updateSelectedVariant();
          });
        });
      }

      // Copy swatches from product card
      const productCard = document.querySelector(`[data-product-id="${product.id}"]`).closest('[style*="width: 250px"]');
      const productSwatches = productCard.querySelector('.variant-picker__option-values');
      const modalSwatches = document.getElementById('modal-swatches');
      if (productSwatches && modalSwatches) {
        modalSwatches.innerHTML = productSwatches.innerHTML;
        
        // Add event listeners to modal swatches
        modalSwatches.querySelectorAll('.variant-picker__option-value').forEach(swatch => {
          swatch.addEventListener('click', function() {
            selectSwatch(this);
          });
          swatch.addEventListener('mouseover', function() {
            hoverSwatch(this);
          });
          swatch.addEventListener('mouseout', function() {
            unhoverSwatch(this);
          });
        });
      }

      // Update quantity buttons
      const decreaseQty = document.getElementById('decrease-qty');
      const increaseQty = document.getElementById('increase-qty');
      const quantityDisplay = document.getElementById('modal-product-quantity');
      
      if (decreaseQty && increaseQty && quantityDisplay) {
        decreaseQty.onclick = () => {
          const currentQty = parseInt(quantityDisplay.textContent);
          if (currentQty > 1) {
            quantityDisplay.textContent = currentQty - 1;
          }
        };
        
        increaseQty.onclick = () => {
          const currentQty = parseInt(quantityDisplay.textContent);
          quantityDisplay.textContent = currentQty + 1;
        };
      }

      // Update add to cart button
      const addToCartBtn = document.getElementById('modal-add-to-cart');
      if (addToCartBtn) {
        addToCartBtn.onclick = () => {
          const quantity = parseInt(document.getElementById('modal-product-quantity').textContent);
          const selectedVariant = getSelectedVariant();
          if (selectedVariant) {
            addToCart(selectedVariant.id, quantity);
          }
        };
      }

      // Update wishlist button
      const wishlistBtn = document.getElementById('modal-add-to-wishlist');
      if (wishlistBtn) {
        wishlistBtn.textContent = 'REMOVE FROM WISHLIST';
        wishlistBtn.onclick = () => {
          removeFromWishlist(product.id);
          modal.classList.remove('x:flex');
          modal.classList.add('x:hidden');
          modal.style.display = 'none';
        };
      }

      // Update subscribe button
      const subscribeBtn = document.getElementById('modal-subscribe');
      if (subscribeBtn) {
        subscribeBtn.onclick = () => {
          // Add subscription logic here
          alert('Subscription feature coming soon!');
        };
      }

      // Show modal
      modal.classList.remove('x:hidden');
      modal.classList.add('x:flex');
      modal.style.display = 'flex';
    }

    function getSelectedVariant() {
      if (!currentProduct || !currentProduct.variants) return null;

      const selectedOptions = {};
      document.querySelectorAll('.variant-option.x\\:bg-black').forEach(checkbox => {
        selectedOptions[checkbox.dataset.optionName] = checkbox.dataset.optionValue;
      });

      return currentProduct.variants.find(variant => {
        return (!selectedOptions[variant.option1_name] || variant.option1 === selectedOptions[variant.option1_name]) &&
               (!selectedOptions[variant.option2_name] || variant.option2 === selectedOptions[variant.option2_name]) &&
               (!selectedOptions[variant.option3_name] || variant.option3 === selectedOptions[variant.option3_name]);
      });
    }

    function updateSelectedVariant() {
      const selectedVariant = getSelectedVariant();
      if (selectedVariant) {
        const modalPrice = document.getElementById('modal-product-price');
        if (modalPrice) {
          modalPrice.textContent = typeof selectedVariant.price === 'number' ? 
            `$${selectedVariant.price.toFixed(2)}` : selectedVariant.price;
        }
      }
    }
    
    function createProductCard(item) {
      const cardElement = document.createElement('div');
      cardElement.style = "width: 250px; height: 453px; background: #fff; display: flex; flex-direction: column; gap: 10px; box-sizing: border-box; cursor: pointer;";
      console.log('Creating card for item:', item);
      
      // Add click handler for the entire card
      cardElement.addEventListener('click', function(e) {
        console.log('Card clicked:', e.target);
        // Stop event propagation for specific elements
        if (e.target.closest('.swatch') || 
            e.target.closest('img[src*="heart"]') || 
            e.target.closest('.cart-icon')) {
          e.stopPropagation();
          return;
        }
        
        // Open modal for all other clicks
        e.preventDefault();
        e.stopPropagation();
        console.log('Opening modal for item:', item);
        openProductModal(item);
      });

      // Format price if available
      let formattedPrice = '';
      if (item.price) {
        formattedPrice = typeof item.price === 'number' ? 
          `$${(item.price / 100).toFixed(2)}` : 
          item.price;
      } else if (item.priceText) {
        formattedPrice = item.priceText;
      } else if (item.compare_at_price) {
        formattedPrice = typeof item.compare_at_price === 'number' ? 
          `$${(item.compare_at_price / 100).toFixed(2)}` : 
          item.compare_at_price;
      } else {
        formattedPrice = '$5.99'; // Default placeholder price
      }

      // Generate swatches HTML from variants
      let swatchesHtml = '';
      if (item.variants && item.variants.length > 0) {
        // Get all variants with their options
        const variants = item.variants.map(variant => {
          const options = {};
          if (variant.option1) options[variant.option1_name || 'Option 1'] = variant.option1;
          if (variant.option2) options[variant.option2_name || 'Option 2'] = variant.option2;
          if (variant.option3) options[variant.option3_name || 'Option 3'] = variant.option3;
          return { ...variant, options };
        });

        // Group variants by their first option (usually color)
        const groupedVariants = variants.reduce((acc, variant) => {
          const firstOption = Object.values(variant.options)[0];
          if (!acc[firstOption]) {
            acc[firstOption] = [];
          }
          acc[firstOption].push(variant);
          return acc;
        }, {});

        // Create swatches for each group
        swatchesHtml = Object.entries(groupedVariants).map(([optionValue, variants], index) => {
          const firstVariant = variants[0];
          // Get the variant image using featured_media
          const variantImage = firstVariant.featured_media?.src || firstVariant.featured_image?.src || item.featured_media?.src || item.image;
          return `
            <div 
              class="variant-picker__option-value variant-picker__option-value--swatch"
              style="width: 25px; height: 25px; background-color: ${optionValue}; position: relative; cursor: pointer;"
              onclick="selectSwatch(this)"
              onmouseover="hoverSwatch(this)"
              onmouseout="unhoverSwatch(this)"
              data-variant-id="${firstVariant.id}"
              data-variants='${JSON.stringify(variants)}'
              data-selected="${index === 0 ? 'true' : 'false'}"
              data-image="${variantImage}"
              title="${optionValue}"
            >
              <input 
                type="radio" 
                class="sr-only" 
                name="option-${item.id}" 
                value="${optionValue}"
                ${index === 0 ? 'checked' : ''}
              >
              <span class="variant-picker__option-value__label">
                <span class="variant-picker__option-value__swatch" style="background-color: ${optionValue};"></span>
              </span>
              <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -2px; left: 0; width: 100%; height: 2px; background-color: ${optionValue}; opacity: 0; transition: opacity 0.2s ease;"></span>
            </div>
          `;
        }).join('');

        // Add default swatch if no variants
        if (!swatchesHtml) {
          swatchesHtml = `
            <div 
              class="variant-picker__option-value variant-picker__option-value--swatch"
              style="width: 25px; height: 25px; background-color: #d1bb9f; position: relative; cursor: pointer;"
              onclick="selectSwatch(this)"
              data-selected="true"
            >
              <input 
                type="radio" 
                class="sr-only" 
                name="option-${item.id}" 
                value="default"
                checked
              >
              <span class="variant-picker__option-value__label">
                <span class="variant-picker__option-value__swatch" style="background-color: #d1bb9f;"></span>
              </span>
              <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -2px; left: 0; width: 100%; height: 2px; background-color: #d1bb9f; opacity: 1;"></span>
            </div>
          `;
        }
      }
      
      const title = item.title || 'Untitled Product';
      console.log('Creating card for item:', item);
      
      cardElement.innerHTML = `
        <!-- Image (250x250) with Heart -->
        <div style="width: 100%; height: 250px; overflow: hidden; position: relative; cursor: pointer;" onclick="openProductModal(${JSON.stringify(item)})">
          <img 
            src="${item.image || '{{ "test_img1.png" | asset_url }}'}" 
            alt="${title}" 
            class="product-image"
            style="width: 100%; height: 100%; object-fit: cover; image-rendering: auto; transition: opacity 0.3s ease;" 
            width="250" 
            height="250"
          />
          <!-- Heart Icon (active) -->
          <img 
            src="{{ 'heart_black.png' | asset_url }}" 
            alt="Remove from Wishlist" 
            style="position: absolute; top: 8px; right: 8px; width: 16px; height: 16px; cursor: pointer;"
            onclick="removeFromWishlist('${item.id}')"
            width="16"
            height="16"
          />
        </div>
      
        <!-- Variant Swatches -->
        <div class="variant-picker__option-values wrap gap-2" style="display: flex; gap: 6px;">
          ${swatchesHtml || `
            <div 
              class="variant-picker__option-value variant-picker__option-value--swatch x:m-1"
              style="width: 25px; height: 25px; background-color: #d1bb9f; position: relative; cursor: pointer;"
              onclick="selectSwatch(this)"
              data-selected="true"
            >
              <input 
                type="radio"
                class="sr-only"
                name="option-${item.id}"
                value="default"
                checked
              >
              <span class="variant-picker__option-value__label">
                <span class="variant-picker__option-value__swatch" style="background-color: #d1bb9f;"></span>
              </span>
              <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -2px; left: 0; width: 100%; height: 2px; background-color: #d1bb9f; opacity: 1;"></span>
            </div>
          `}
        </div>
      
        <!-- Category and Cart -->
        <div class="x:flex x:flex-col x:gap-1">
          <div class="x:text-base x:flex x:justify-between x:items-center x:uppercase">
            <span class="product-title" style="cursor: pointer;" onclick="openProductModal(${JSON.stringify(item)})">${title}</span>
            <span class="cart-icon x:hover:scale-110 x:cursor-pointer x:transition-all x:duration-300" data-product-id="${item.id}">
              {% render 'icon', icon: 'shop-cart' %}
            </span>
          </div>
          
          <!-- Price -->
          <span class="x:text-base product-price">$${formattedPrice}</span>
          
          <!-- Certifications -->
          {% render 'icon', icon: 'certificate' %}
        </div>
      `;
      
      return cardElement;
    }
    
    function renderWishlistItems() {
      const wishlistContainer = document.getElementById('wishlist-container');
      const emptyWishlistMessage = document.getElementById('empty-wishlist-message');
      
      if (!wishlistContainer) {
        console.error('Wishlist container not found');
        return;
      }
      
      // Get wishlist from localStorage
      const wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
      console.log('Current wishlist:', wishlist);
      
      // Clear existing items
      wishlistContainer.innerHTML = '';
      
      // Show empty message if wishlist is empty
      if (wishlist.length === 0) {
        if (emptyWishlistMessage) {
          emptyWishlistMessage.style.display = 'block';
          wishlistContainer.appendChild(emptyWishlistMessage);
        }
        return;
      }
      
      // Add items to container
      wishlist.forEach(item => {
        const productCard = createProductCard(item);
        wishlistContainer.appendChild(productCard);
      });

      // Add event listeners to cart icons after rendering
      addCartIconListeners();
    }
    
    // Make functions available globally
    window.openProductModal = openProductModal;
    window.removeFromWishlist = removeFromWishlist;
    window.selectSwatch = selectSwatch;
  });

  function hoverSwatch(el) {
    const productCard = el.closest('[style*="width: 250px"]');
    const productImage = productCard.querySelector('.product-image');
    const variantImage = el.dataset.image;
    
    if (productImage && variantImage) {
      productImage.style.opacity = '0.7';
      setTimeout(() => {
        productImage.src = variantImage;
        productImage.style.opacity = '1';
      }, 150);
    }

    // Show underline on hover
    const underline = el.querySelector('.variant-picker__option-value__underline');
    if (underline) {
      underline.style.opacity = '1';
    }
  }

  function unhoverSwatch(el) {
    if (!el.hasAttribute('data-selected')) {
      const productCard = el.closest('[style*="width: 250px"]');
      const productImage = productCard.querySelector('.product-image');
      const selectedSwatch = productCard.querySelector('.variant-picker__option-value[data-selected="true"]');
      
      if (productImage && selectedSwatch) {
        const selectedImage = selectedSwatch.dataset.image;
        productImage.style.opacity = '0.7';
        setTimeout(() => {
          productImage.src = selectedImage;
          productImage.style.opacity = '1';
        }, 150);
      }

      // Hide underline if not selected
      const underline = el.querySelector('.variant-picker__option-value__underline');
      if (underline) {
        underline.style.opacity = '0';
      }
    }
  }

  function selectSwatch(el) {
    const container = el.parentElement;
    const variantId = el.dataset.variantId;
    const variants = JSON.parse(el.dataset.variants || '[]');

    // Remove selected state from all swatches
    container.querySelectorAll('.variant-picker__option-value').forEach(swatch => {
      swatch.removeAttribute('data-selected');
      swatch.classList.remove('is-selected');
      const radio = swatch.querySelector('input[type="radio"]');
      if (radio) radio.checked = false;
      
      // Hide underline
      const underline = swatch.querySelector('.variant-picker__option-value__underline');
      if (underline) {
        underline.style.opacity = '0';
      }
    });

    // Set selected state
    el.setAttribute('data-selected', 'true');
    el.classList.add('is-selected');
    const radio = el.querySelector('input[type="radio"]');
    if (radio) radio.checked = true;

    // Show underline for selected swatch
    const underline = el.querySelector('.variant-picker__option-value__underline');
    if (underline) {
      underline.style.opacity = '1';
    }

    // Update image
    const productCard = el.closest('[style*="width: 250px"]');
    const productImage = productCard.querySelector('.product-image');
    const variantImage = el.dataset.image;
    
    if (productImage && variantImage) {
      productImage.style.opacity = '0.7';
      setTimeout(() => {
        productImage.src = variantImage;
        productImage.style.opacity = '1';
      }, 150);
    }

    // Update price if variant has different price
    if (variants.length > 0) {
      const priceElement = productCard.querySelector('.product-price');
      
      if (priceElement) {
        const selectedVariant = variants[0]; // Use first variant of the group
        if (selectedVariant && selectedVariant.price) {
          // Convert price to proper format (divide by 100 if it's in cents)
          const price = typeof selectedVariant.price === 'number' ? 
            (selectedVariant.price / 100).toFixed(2) : 
            selectedVariant.price;
          priceElement.textContent = `$${price}`;
        }
      }
    }
  }
  
  function removeFromWishlist(productId) {
    // Get current wishlist
    let wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
    
    // Find and remove the product
    const index = wishlist.findIndex(item => item.id === productId);
    if (index !== -1) {
      wishlist.splice(index, 1);
      
      // Save updated wishlist
      localStorage.setItem('shopify_wishlist', JSON.stringify(wishlist));
      
      // Re-render wishlist
      renderWishlistItems();
      
      // Notify
      alert('Item removed from wishlist');
    }
  }
  
  function addToCart(productId, quantity = 1) {
    // Add to cart functionality
    let formData = {
      'items': [{
        'id': productId,
        'quantity': quantity
      }]
    };
    
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
      alert('Item added to cart!');
      // Optionally refresh cart drawer or redirect
    })
    .catch((error) => {
      console.error('Error:', error);
      alert('Error adding item to cart');
    });
  }

  // Auto-select first swatch for each card on load
  window.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.swatch[data-selected="true"]').forEach(el => {
      selectSwatch(el);
    });
  });
</script>
