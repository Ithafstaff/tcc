<style>
  input[type=radio] {
    visibility: hidden;
    position: absolute;
  }

  .show-grid span label {
    font-family: 'Poppins', sans-serif;
    font-weight: 400;
    color: rgba(22,22,22,0.7);
    width: 97px;
    display: flex;
    gap: 5%;
    align-items: center;
    justify-content: left;
  }

  .sort-grid span label {
    font-family: 'Poppins', sans-serif;
    font-weight: 400;
    color: rgba(22,22,22,0.7);
    width: fit-content;
    display: flex;
    gap: 5px;
    align-items: center;
    justify-content: left;
  }
  
  input[type=radio] + label:before {
    height:20px;
    width:20px;
    content: " ";
    display:block;
    border:1px solid rgba(22,22,22,0.7);
  }

  input[type=radio]:checked + label:before {
    background-color: black;
  }
  
  .custom-heading {
    font-family: 'Alata', sans-serif;
    font-weight: 400;
  }

  .show-grid {
    display: grid;
    grid-template-columns: repeat(3, minmax(0, 1fr));
    width: 100%;
    row-gap: 16px;
  }

  .show-grid span {
    width: 100%;
    display: flex;
    height: 20px;
  }

  .show-grid span:nth-child(3n+1) {
    justify-content: left;
  }

  .show-grid span:nth-child(3n+2) {
    justify-content: center;
  }

  .show-grid span:nth-child(3n) {
    justify-content: right;
  }

  .sort-grid {
    display: grid;
    grid-template-columns: minmax(147px, auto) auto auto;
    width: 100%;
    row-gap: 16px;
    padding-right: 0px;
  }

  .sort-grid span {
    display: flex;
    height: 20px;
  }

  .sort-grid span:nth-child(3n+1) {
    justify-content: left;
  }

  .sort-grid span:nth-child(3n+2) {
    justify-content: left;
  }

  .sort-grid span:nth-child(3n) {
    justify-content: left;
  }
</style>

<div style="display: flex; flex-direction: column; width: 100%; padding-top: 34px; padding-bottom: 34px; gap: 15px;">
  <div style="display: flex; width: 100%; justify-content: space-between; align-items: center;">
    <span class="custom-heading" style="font-size: 20px;">My Wishlist</span>
    <!-- FILTER HIDDEN FOR NOW -->
    <button
      onclick="(function() {
        document.getElementById('filter-modal').style.display = 'flex';
      })()"
      style="display: flex; width: fit-content; height: fit-content; align-items: center; gap: 6px;">
      <span style="font-size: 12px;">FILTER</span>
      <img
        src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/person-img_2.png?v=1745996393"
        alt=""
        width="10px"
        height="10px"
        style="width: 10px; height: 10px;"
      >
    </button>
  </div>
  <div id="wishlist-container-mobile" style="display: grid; grid-template-columns: repeat(2, minmax(0, 1fr)); column-gap: 10px; row-gap: 30px;">
    <div id="empty-wishlist-message-mobile" style="gap: 20px; display: none; width: 100%; flex-direction: column; justify-content: center; align-items: center; grid-column: 1 / -1; padding: 42px 50px; text-align: center;">
      <span class="custom-heading" style="text-transform: uppercase; font-size: 20px; letter-spacing: 1px;">your favorites is currently empty</span>
      <span style="font-size: 12px; letter-spacing: 1px;">Don't worry - the best deals in party supplies are just a click away!</span>
      <a href="/collections/all" class="custom-heading" style="background-color: black; color: white; font-size: 16px; padding: 9px 20px; line-height: 20px;">
        SHOP NOW
      </a>
    </div>
  </div>
</div>

<div
  id="filter-modal"
  onclick="(function() { document.getElementById('filter-modal').style.display = 'none'; })()"
  style="flex-direction: column; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: none;"
>
  <div onclick="event.stopPropagation()" style="background-color: white; width: 100%; height: fit-content; display: flex; flex-direction: column; padding: 26px 25px; position: sticky; inset-block-start: 136.183px;">
    <details class="accordion" style="border: none;" aria-expanded="false" is="accordion-disclosure">
      <summary>
        {%- comment -%}iOS 14 does not support flex on the summary itself, so we have to use this extra div{%- endcomment -%}
        <!-- ACCORDION HEADER/BUTTON HERE -->
        <div class="accordion__toggle" style="display: flex; justify-content: space-between; width: 100%;">
          <span>SHOW</span>
          <span class="circle-chevron group-hover:colors group-expanded:colors group-expanded:rotate">{%- render 'icon' with 'chevron-bottom-small' -%}</span>
        </div>
      </summary>

      <!-- ACCORDION CONTENT HERE -->
      <div class="accordion__content show-grid">
        <span>
          <input id="show-r1" type="radio" name="show-filter" value="10" checked>
          <label for="show-r1">10 items</label>
        </span>
        <span>
          <input id="show-r2" type="radio" name="show-filter" value="20">
          <label for="show-r2">20 items</label>
        </span>
        <span>
          <input id="show-r3" type="radio" name="show-filter" value="30">
          <label for="show-r3">30 items</label>
        </span>
        <span>
          <input id="show-r4" type="radio" name="show-filter" value="40">
          <label for="show-r4">40 items</label>
        </span>
        <span>
          <input id="show-r5" type="radio" name="show-filter" value="50">
          <label for="show-r5">50 items</label>
        </span>
        <span>
          <input id="show-r6" type="radio" name="show-filter" value="60">
          <label for="show-r6">60 items</label>
        </span>
      </div>
    </details>
    <details class="accordion" style="border: none;" aria-expanded="false" is="accordion-disclosure">
      <summary>
        {%- comment -%}iOS 14 does not support flex on the summary itself, so we have to use this extra div{%- endcomment -%}
        <!-- ACCORDION HEADER/BUTTON HERE -->
        <div class="accordion__toggle" style="display: flex; justify-content: space-between; width: 100%;">
          <span>SORT BY</span>
          <span class="circle-chevron group-hover:colors group-expanded:colors group-expanded:rotate">{%- render 'icon' with 'chevron-bottom-small' -%}</span>
        </div>
      </summary>

      <!-- ACCORDION CONTENT HERE -->
      <div class="accordion__content">
        <div class="sort-grid" style="border-bottom: 1px solid rgba(22,22,22,0.1); padding-bottom: 20px;">
          <span>
            <input id="sort-r1" type="radio" name="sort-filter" value="10" checked>
            <label for="sort-r1">Most Relevant</label>
          </span>
          <span>
            <input id="sort-r2" type="radio" name="sort-filter" value="20">
            <label for="sort-r2">New</label>
          </span>
          <span>
            <input id="sort-r3" type="radio" name="sort-filter" value="30">
            <label for="sort-r3">Top Rated</label>
          </span>
          <span>
            <input id="sort-r4" type="radio" name="sort-filter" value="40">
            <label for="sort-r4">Price, Low to High</label>
          </span>
          <span style="grid-column: span 2 / span 2;">
            <input id="sort-r5" type="radio" name="sort-filter" value="50">
            <label for="sort-r5">Price, High to Low</label>
          </span>
        </div>
      </div>
    </details>
    <div id="sort-categories" style="display: flex; flex-direction: column; padding-top: 20px; gap: 14px;">
      <!-- Dynamic Categories -->
    </div>
    <div style="display: flex; width: 100%; justify-content: center;">
      <button id="apply-filter" style="display: flex; width: 174px; height: 38px; background-color: #222222; color: white; align-items: center; justify-content: center;">
        APPLY FILTER
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {  
    // Render wishlist items
    renderWishlistItemsMobile();
    
    // Listen for wishlist updates
    // document.addEventListener('wishlist:updated', function(event) {
    //   renderWishlistItemsMobile();
    // });

    document.querySelector('#apply-filter').addEventListener('click', function(e) {
      document.getElementById('filter-modal').style.display = 'none';
      renderWishlistItemsMobile();
    });

    function createCategoryButtons(item) {
      const catBtn = document.createElement('button');
      catBtn.style = "display: flex; width: 100%; justify-content: space-between;";

      catBtn.innerHTML =`
        <span style="text-transform: uppercase;">${item}</span>
        <img
          src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/person-img_2.png?v=1745996393"
          alt=""
          width="25px"
          height="25px"
        >
      `;

      return catBtn;
    }

    const categories = ['dining', 'table top', 'plastic dinnerware', 'judaica', 'bedding', 'lucite', 'towels', 'tablecloth'];

    categories.forEach((item, index) => {
      // Create checkbox input
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.id = `checkbox-${index}`;
      checkbox.name = `checkbox-group`;
      checkbox.value = item;
    
      // Create label
      const label = document.createElement('label');
      label.htmlFor = checkbox.id;
      label.textContent = item;
    
      // Optionally group them in a wrapper div
      const wrapper = document.createElement('div');
      wrapper.appendChild(label);
      wrapper.appendChild(checkbox);
      wrapper.style = "text-transform: uppercase; display: flex; justify-content: space-between";
    
      // Append to container
      document.getElementById('sort-categories').appendChild(wrapper);
    });

    

    // Add click event listeners to cart icons
    function addCartIconListeners() {
      document.querySelectorAll('.cart-icon').forEach(icon => {
        icon.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          const productId = this.getAttribute('data-product-id');
          const wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
          const product = wishlist.find(item => item.id === productId);
          
          if (product) {
            window.location.href = `/products/${product.handle}`;
          }
        });
      });
    }

    function getSelectedVariant() {
      if (!currentProduct || !currentProduct.variants) return null;

      const selectedOptions = {};
      document.querySelectorAll('.variant-option.x\\:bg-black').forEach(checkbox => {
        selectedOptions[checkbox.dataset.optionName] = checkbox.dataset.optionValue;
      });

      return currentProduct.variants.find(variant => {
        return (!selectedOptions[variant.option1_name] || variant.option1 === selectedOptions[variant.option1_name]) &&
               (!selectedOptions[variant.option2_name] || variant.option2 === selectedOptions[variant.option2_name]) &&
               (!selectedOptions[variant.option3_name] || variant.option3 === selectedOptions[variant.option3_name]);
      });
    }

    function updateSelectedVariant() {
      const selectedVariant = getSelectedVariant();
      if (selectedVariant) {
        const modalPrice = document.getElementById('modal-product-price');
        if (modalPrice) {
          modalPrice.textContent = typeof selectedVariant.price === 'number' ? 
            `$${selectedVariant.price.toFixed(2)}` : selectedVariant.price;
        }
      }
    }
    
    function createProductCard(item) {
      const cardElement = document.createElement('div');
      cardElement.style = "display: flex; flex-direction: column; width: 100%; height: fit-content; gap: 10px;";
      
      // Add click handler for the entire card
      cardElement.addEventListener('click', function(e) {
        console.log('Card clicked:', e.target);
        // Stop event propagation for specific elements
        if (e.target.closest('.swatch') || 
            e.target.closest('img[src*="heart"]') || 
            e.target.closest('.cart-icon')) {
          e.stopPropagation();
          return;
        }
        
        // Open product page for all other clicks
        e.preventDefault();
        e.stopPropagation();

        window.location.href = `/products/${item.handle}`;
      });

      // Format price if available
      let formattedPrice = '';
      if (item.price) {
        formattedPrice = typeof item.price === 'number' ? 
          `$${(item.price / 100).toFixed(2)}` : 
          item.price;
      } else if (item.priceText) {
        formattedPrice = item.priceText;
      } else if (item.compare_at_price) {
        formattedPrice = typeof item.compare_at_price === 'number' ? 
          `$${(item.compare_at_price / 100).toFixed(2)}` : 
          item.compare_at_price;
      } else {
        formattedPrice = '$5.99'; // Default placeholder price
      }

      // Generate swatches HTML from variants
      let swatchesHtml = '';
      if (item.variants && item.variants.length > 0) {
        // Get all variants with their options
        const variants = item.variants.map(variant => {
          const options = {};
          if (variant.option1) options[variant.option1_name || 'Option 1'] = variant.option1;
          if (variant.option2) options[variant.option2_name || 'Option 2'] = variant.option2;
          if (variant.option3) options[variant.option3_name || 'Option 3'] = variant.option3;
          return { ...variant, options };
        });

        // Group variants by their first option (usually color)
        const groupedVariants = variants.reduce((acc, variant) => {
          const firstOption = Object.values(variant.options)[0];
          if (!acc[firstOption]) {
            acc[firstOption] = [];
          }
          acc[firstOption].push(variant);
          return acc;
        }, {});

        // Create swatches for each group
        swatchesHtml = Object.entries(groupedVariants).map(([optionValue, variants], index) => {
          const firstVariant = variants[0];
          // Get the variant image using featured_media
          const variantImage = firstVariant.featured_media?.src || firstVariant.featured_image?.src || item.featured_media?.src || item.image;
          return `
            <div 
              class="variant-picker__option-value variant-picker__option-value--swatch"
              style="width: 25px; height: 25px; background-color: ${optionValue}; position: relative; cursor: pointer;"
              onclick="selectSwatch(this)"
              data-variant-id="${firstVariant.id}"
              data-variants='${JSON.stringify(variants)}'
              data-selected="${index === 0 ? 'true' : 'false'}"
              data-image="${variantImage}"
              title="${optionValue}"
            >
              <input 
                type="radio" 
                class="sr-only" 
                name="option-${item.id}" 
                value="${optionValue}"
                ${index === 0 ? 'checked' : ''}
              >
              <span class="variant-picker__option-value__label">
                <span class="variant-picker__option-value__swatch" style="background-color: ${optionValue};"></span>
              </span>
              <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -6px; left: 0; width: 100%; height: 2px; background-color: ${optionValue}; opacity: 0; transition: opacity 0.2s ease;"></span>
            </div>
          `;
        }).join('');

        // Add default swatch if no variants
        if (!swatchesHtml) {
          swatchesHtml = `
            <div 
              class="variant-picker__option-value variant-picker__option-value--swatch"
              style="width: 25px; height: 25px; background-color: #d1bb9f; position: relative; cursor: pointer;"
              onclick="selectSwatch(this)"
              data-selected="true"
            >
              <input 
                type="radio" 
                class="sr-only" 
                name="option-${item.id}" 
                value="default"
                checked
              >
              <span class="variant-picker__option-value__label">
                <span class="variant-picker__option-value__swatch" style="background-color: #d1bb9f;"></span>
              </span>
              <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -2px; left: 0; width: 100%; height: 2px; background-color: #d1bb9f; opacity: 1;"></span>
            </div>
          `;
        }
      }
      
      const title = item.title || 'Untitled Product';
      console.log('Creating card for item:', item);
      
      cardElement.innerHTML = `
        <!-- Image (250x250) with Heart -->
        <div style="width: 100%; height: 190px; overflow: hidden; position: relative; cursor: pointer;" onclick="openProductModal(${JSON.stringify(item)})">
          <img 
            src="${item.image || '{{ "test_img1.png" | asset_url }}'}" 
            alt="${title}" 
            class="product-image"
            style="width: 100%; height: 100%; object-fit: cover; image-rendering: auto; transition: opacity 0.3s ease;" 
            width="250" 
            height="250"
          />
          <!-- Heart Icon (active) -->
          <img 
            src="{{ 'heart_black.png' | asset_url }}" 
            alt="Remove from Wishlist" 
            style="position: absolute; top: 8px; right: 8px; width: 16px; height: 16px; cursor: pointer;"
            onclick="(function() {
              removeFromWishlistMobile('${item.id}');
            })()"
            width="16"
            height="16"
          />
        </div>
      
        <!-- Variant Swatches w/ Cart -->
        <div style="display: flex; justify-content: space-between;">
          <div class="variant-picker__option-values wrap gap-2" style="display: flex; gap: 6px;">
            ${swatchesHtml || `
              <div 
                class="variant-picker__option-value variant-picker__option-value--swatch x:m-1"
                style="width: 25px; height: 25px; background-color: #d1bb9f; position: relative; cursor: pointer;"
                onclick="selectSwatch(this)"
                data-selected="true"
              >
                <input 
                  type="radio"
                  class="sr-only"
                  name="option-${item.id}"
                  value="default"
                  checked
                >
                <span class="variant-picker__option-value__label">
                  <span class="variant-picker__option-value__swatch" style="background-color: #d1bb9f;"></span>
                </span>
                <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -2px; left: 0; width: 100%; height: 2px; background-color: #d1bb9f; opacity: 1;"></span>
              </div>
            `}
          </div>
          <span class="cart-icon x:hover:scale-110 x:cursor-pointer x:transition-all x:duration-300" data-product-id="${item.id}">
            {% render 'icon', icon: 'shop-cart' %}
          </span>
        </div>
        
      
        <!-- Category and Cart -->
        <div class="x:flex x:flex-col x:gap-1">
          <div class="x:text-base x:flex x:justify-between x:items-center x:uppercase">
            <span class="product-title" style="cursor: pointer; font-size: 14px;" onclick="openProductModal(${JSON.stringify(item)})">${title}</span>
          </div>
          
          <!-- Price -->
          <span style="font-size: 14px;">$${formattedPrice}</span>
          
          <!-- Certifications -->
          {% render 'icon', icon: 'certificate' %}
        </div>
      `;

      return cardElement;
    }

    function renderWishlistItemsMobile() {
      const wishlistContainer = document.getElementById('wishlist-container-mobile');
      const emptyWishlistMessage = document.getElementById('empty-wishlist-message-mobile');
      
      if (!wishlistContainer) {
        console.error('Wishlist container not found');
        return;
      }
      
      // Get wishlist from localStorage
      const wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
      console.log('Current wishlist:', wishlist);
      
      // Clear existing items
      wishlistContainer.innerHTML = '';
      
      // Show empty message if wishlist is empty
      if (wishlist.length <= 0) {
        wishlistContainer.innerHTML = `
          <div id="empty-wishlist-message-mobile" style="gap: 20px; display: flex; width: 100%; flex-direction: column; justify-content: center; align-items: center; grid-column: 1 / -1; padding: 42px 50px; text-align: center;">
            <span class="custom-heading" style="text-transform: uppercase; font-size: 20px; letter-spacing: 1px;">your favorites is currently empty</span>
            <span style="font-size: 12px; letter-spacing: 1px;">Don't worry - the best deals in party supplies are just a click away!</span>
            <a href="/collections/all" class="custom-heading" style="background-color: black; color: white; font-size: 16px; padding: 9px 20px; line-height: 20px;">
              SHOP NOW
            </a>
          </div>
        `;
        wishlistContainer.style.filter = "drop-shadow(0 2px 3px rgba(22,22,22,0.1))";
        wishlistContainer.style.backgroundColor = "white";
        // if (emptyWishlistMessage) {
        //   emptyWishlistMessage.style.display = 'flex';
        //   wishlistContainer.appendChild(emptyWishlistMessage);
        // }

        return;
      }

      // Add items to container
        const itemsPerPage = Number(document.querySelector('input[name="show-filter"]:checked').value);
        for (let i = 0; i < itemsPerPage; i++) {
          if (wishlist[i]) {
            const productCard = createProductCard(wishlist[i]);
            wishlistContainer.appendChild(productCard);
          } else {
            break;
          }
        }
    
        // Add event listeners to cart icons after rendering
        addCartIconListeners();
      }
    
     window.renderWishlistItemsMobile = renderWishlistItemsMobile;
  });

  function hoverSwatch(el) {
    const productCard = el.closest('[style*="width: 250px"]');
    const productImage = productCard.querySelector('.product-image');
    const variantImage = el.dataset.image;
  
    // Remove all underlines
    productCard.querySelectorAll('.variant-picker__option-value__underline').forEach(underline => {
      underline.style.opacity = '0';
    });
  
    // Update image on hover
    if (productImage && variantImage && productImage.src !== variantImage) {
      productImage.style.opacity = '0.7';
      setTimeout(() => {
        productImage.src = variantImage;
        productImage.style.opacity = '1';
      }, 150);
    }
  
    // Show underline for hovered swatch
    const underline = el.querySelector('.variant-picker__option-value__underline');
    if (underline) {
      underline.style.opacity = '1';
    }
  }
  
  function unhoverSwatch(el) {
    const productCard = el.closest('[style*="width: 250px"]');
    const productImage = productCard.querySelector('.product-image');
    const selectedSwatch = productCard.querySelector('.variant-picker__option-value[data-selected="true"]');
  
    // Hide underline of currently unhovered swatch
    const underline = el.querySelector('.variant-picker__option-value__underline');
    if (underline) {
      underline.style.opacity = '0';
    }
  
    // Restore underline to selected swatch
    if (selectedSwatch && selectedSwatch !== el) {
      const selectedUnderline = selectedSwatch.querySelector('.variant-picker__option-value__underline');
      if (selectedUnderline) {
        selectedUnderline.style.opacity = '1';
      }
  
      // Also reset image to selected
      const selectedImage = selectedSwatch.dataset.image;
      if (productImage && selectedImage) {
        productImage.style.opacity = '0.7';
        setTimeout(() => {
          productImage.src = selectedImage;
          productImage.style.opacity = '1';
        }, 150);
      }
    }
  }

  function selectSwatch(el) {
    const container = el.parentElement;
    const variantId = el.dataset.variantId;
    const variants = JSON.parse(el.dataset.variants || '[]');

    // Remove selected state from all swatches
    container.querySelectorAll('.variant-picker__option-value').forEach(swatch => {
      swatch.removeAttribute('data-selected');
      swatch.classList.remove('is-selected');
      const radio = swatch.querySelector('input[type="radio"]');
      if (radio) radio.checked = false;
      
      // Hide underline
      const underline = swatch.querySelector('.variant-picker__option-value__underline');
      if (underline) {
        underline.style.opacity = '0';
      }
    });

    // Set selected state
    el.setAttribute('data-selected', 'true');
    el.classList.add('is-selected');
    const radio = el.querySelector('input[type="radio"]');
    if (radio) radio.checked = true;

    // Show underline for selected swatch
    const underline = el.querySelector('.variant-picker__option-value__underline');
    if (underline) {
      underline.style.opacity = '1';
    }

    // Update image
    const productCard = el.closest('[style*="width: 250px"]');
    const productImage = productCard.querySelector('.product-image');
    const variantImage = el.dataset.image;
    
    if (productImage && variantImage) {
      productImage.style.opacity = '0.7';
      setTimeout(() => {
        productImage.src = variantImage;
        productImage.style.opacity = '1';
      }, 150);
    }

    // Update price if variant has different price
    if (variants.length > 0) {
      const priceElement = productCard.querySelector('.product-price');
      
      if (priceElement) {
        const selectedVariant = variants[0]; // Use first variant of the group
        if (selectedVariant && selectedVariant.price) {
          // Convert price to proper format (divide by 100 if it's in cents)
          const price = typeof selectedVariant.price === 'number' ? 
            (selectedVariant.price / 100).toFixed(2) : 
            selectedVariant.price;
          priceElement.textContent = `$${price}`;
        }
      }
    }
  }
  
  function removeFromWishlistMobile(productId) {
    // Get current wishlist
    let wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
    
    // Find and remove the product
    const index = wishlist.findIndex(item => item.id === productId);
    if (index !== -1) {
      wishlist.splice(index, 1);
      
      // Save updated wishlist
      localStorage.setItem('shopify_wishlist', JSON.stringify(wishlist));
      
      // Re-render wishlist
      renderWishlistItemsMobile();
    }
  }

  // Auto-select first swatch for each card on load
  window.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.swatch[data-selected="true"]').forEach(el => {
      selectSwatch(el);
    });
  });
</script>