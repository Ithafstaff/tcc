<style>

  .profile {
    padding: 0 3% 30px; 
    font-family: "Alata", sans-serif !important;
    color: #222222;
    margin: 0 auto;
    width: 100%;
  }

  .profile__container {
    max-width: 1400px;
    width: 100%;
    border-top: 1px solid rgba(34, 34, 34, 0.5);
    margin: 0 auto;
    display: grid;
    grid-template-columns: 240px 1fr;
  }

  .profile__col-left {
    /* border: 1px solid red; */
    /* min-width: 240px; */
    padding: 0 15px;
  }

  .profile__col-right {
     width: 100%;
  }

  .profile__info-block {
    display: flex;
    gap: 18px;
    padding: 27px 0  25px;
  }

  .profile__menu-container {
    display: flex;
    flex-direction: column;
    gap: 30px;
    margin-top: 40px;
  }

  .profile__menu-list {
    margin: 0;
    padding: 0;
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .profile__menu-item {
    text-transform: capitalize;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .profile__menu-item.active {
    text-decoration: underline;
  }

  .profile__menu-item:hover {
    text-decoration: underline;
    color: rgba(34, 34, 34, 0.5);
  }

  .profile__image-block {
    min-width: 50px;
    height: 50px;
    border: 1px solid #222222;
    overflow: hidden;
  }

  .profile__info-desc {
    font-size: 10px;
    display: block;
    color: rgba(34, 34, 34, 0.5);
  }
  .profile__info-desc--name {
    font-size: 14px;
    display: block;
    text-transform: capitalize;
  }

  .profile__order-heading-wrap {
    display: flex;
    justify-content: space-between;
    padding: 44px 40px 37px 13px ;
  }

  .profile__order-heading {
    font-size: 30px;
    font-weight: 400;
    line-height: 20px;
  }

  .profile__order-container {
    margin: 0 30px 0 10px;
    padding: 0 35px 0 30px;
    border: 1px solid rgba(34, 34, 34, 0.1);
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  }

  .profile__order-block {
    padding: 17px 0 18px;
    border-bottom: 1px solid rgba(34, 34, 34, 0.2);
  }

  .profile__order-block-list {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 22px;
    padding: 0;
  }

  .profile__order-block-item {
    /* border: 1px solid green; */
    list-style: none;
    display: flex;
    gap: 16px;
  }

  .profile__order-button-container {
    display: flex;
    justify-content: space-between;
    padding-top: 20px;
  }

  

  .profile__order-cat-wrap {
    display: flex;
    justify-content: space-between;
  }

  .flex-start {
    justify-content: flex-start;
    gap: 80px;
  }

  .profile__order-cat-link {
    text-decoration: none !important;
    text-transform: uppercase;
    font-size: 14px;
    padding: 24px 0 16px;
    transition: all 0.3s ease;
  }
  
  .profile__order-cat-link:hover {
    border-bottom: 1px solid #222222;
  }

  .profile__order-cat-link--active {
    border-bottom: 1px solid #222222;
  }

  .profile__order-button-wrap {
    display: flex;
    gap: 8px;
  }

  .profile__order-btn-link {
    width: 130px;
    height: 45px;
    text-decoration: none;
    text-transform: uppercase;
    border: 1px solid #000;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #fff;
    background-color: #000;
    transition: all 0.3s ease;
    font-size: 14px;
    letter-spacing: 1px;
    padding-top: 5px;
  }

  .profile__order-btn-link:hover {
    color: #000;
    background-color: #fff;
  }

  .profile__order-btn-link--white {
    color: #000;
    background-color: #fff;
  }

  .profile__order-desc-wrap span {
    display: block;
  }

  .profile__order-filer {
    display: flex;
    align-items: center;
    font-size: 10px;
    color: rgba(34, 34, 34, 0.5);
  }

  .profile__order-date-wrap {
    display: flex;
  }
  
  .profile__order-date-wrap span {
    font-size: 12px;
    color: rgba(34, 34, 34, 0.5);
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 12px;
    display: flex;
  }

  .profile__order-date {
    padding-right: 10px;
    border-right: 1px solid rgba(34, 34, 34, 0.5);
  }
  .profile__order-status {
    padding-left: 10px;
  }

  .profile__order-item-name {
    font-size: 14px;
    line-height: 20px;
  }

  .profile__order-item-variant,
  .profile__order-item-qty,
  .profile__order-item-price {
    font-family: "Poppins", sans-serif !important;
    font-size: 12px;
    line-height: 20px;
  }

  .profile__order-item-sub {
    font-size: 8px;
    letter-spacing: 1px;
    line-height: 20px;
    color: #FF2C2C;
    padding: 0 5px;
    border: 1px solid #FF2C2C;
    width: fit-content;
    text-transform: uppercase;
  }

  .profile__order-ttl-wrap {
    display: flex;
    align-items: center;
  }

  .profile__order-ttl-txt {
    font-size: 14px;
    text-transform: uppercase;
    padding-right: 10px;
    letter-spacing: 1px;
  }

  .profile__order-ttl-price {
    font-size: 24px;
    letter-spacing: 1px;
  }

.section-spacing-block,
.shopify-section,
.section {
  padding: 0 !important;
}

.pagination {
  margin-top: 2rem;
  text-align: center;
}

.pagination__container {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
}

.pagination__link {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 2.5rem;
  height: 2.5rem;
  padding: 0 0.5rem;
  border: 1px solid rgba(34, 34, 34, 0.2);
  color: #222222;
  text-decoration: none;
  transition: all 0.3s ease;
}

.pagination__link:hover {
  background-color: rgba(34, 34, 34, 0.1);
}

.pagination__link--active {
  background-color: #222222;
  color: #ffffff;
  border-color: #222222;
}

.profile__section {
  display: none;
}
.show {
  display: flex;
  flex-direction: column;
}

.profile__account-info-wrap {
  display: flex;
  justify-content: space-between;
}

.profile__account-pic-block {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding-left: 16px;
  padding-right: 16px;
  width: 100%;
}

.profile__account-pic-box {
  width: 200px;
  height: 200px;
  border: 1px solid #222;
  margin-bottom: 30px;
}

.profile__account-pic {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.profile__account-input-label {
  text-transform: uppercase;
  border: 1px solid #222;
  width: 100px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  font-family: "Alata", sans-serif !important;
  letter-spacing: 1px;
  margin-bottom: 10px;
}  

.profile__account-input-note {
  color: rgba(34, 34, 34, 0.5);
  font-size: 11px;
  letter-spacing: 1px;
  font-family: "Poppins", sans-serif !important;
  text-align: center;
}

.hide {
    display: none !important;
}
  
    /* 
    font-family: "Alata", sans-serif !important;
    font-family: "Poppins", sans-serif !important;
    */

  @media screen and (max-width: 1150px) {
    .profile__container {
      grid-template-columns: 1fr;
    }
  }

  @media screen and (max-width: 1150px) {
    .profile__container {
      grid-template-columns: 1fr;
    }


    .profile__menu-item {
      text-align: center;
    }

    .profile {
      padding: 0 20px 20px; 
    }

    .profile__order-container {
      margin: 0;
      padding: 0 20px;
    }

    
  }

  



  
</style>


<div class="profile">
  <div class="profile__container">
    <div class="profile__col-left">
      <!-- <div class="profile__info-block">
        <div class="profile__image-block">
          <img src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/person-img_2.png?v=1745996393" alt="" class="profile__profile-picture" width="50" height="50">
        </div>
        {% if customer %}
          <div class="profile__info-block-wrap">
            <span class="profile__info-desc profile__info-desc--name" style="color: black;">
              {{ customer.first_name }} {{ customer.last_name }}
            </span>
            <span class="profile__info-desc">
              {{ customer.phone }}
            </span>
            <span class="profile__info-desc">
              {{ customer.email }}
            </span>
          </div>
        {% endif %}
      </div> -->
      <div class="profile__menu-container">
        <ul class="profile__menu-list">
          <li class="profile__menu-item active" id="my-orders">
            <span>My Orders</span>
          </li>
          <li class="profile__menu-item" id="my-account">
            <span>My Account</span>
          </li>
          <li class="profile__menu-item" id="my-wishlist">
            <span>My Wishlist</span>
          </li>
          <li class="profile__menu-item">
            <a href="{{ routes.account_logout_url }}">Sign Out</a>
          </li>
          <!-- <li class="profile__menu-item">
            <a href="/pages/profile-subscription">My Subscriptions</a>
          </li> -->
          <!-- <li class="profile__menu-item">
            <a href="/pages/profile-policies">policies</a>
          </li> -->
        </ul>
      </div>
    </div>

    <div class="profile__col-right">
      <section class="profile__section show" id="my-orders-section">
        <div class="profile__order-heading-wrap">
        <h2 class="profile__order-heading">My Orders</h2>
        <div class="profile__order-filer">
          <select id="order-filter">
            <option value="5-10">5–10 ITEMS</option>
            <option value="10-20">10–20 ITEMS</option>
            <option value="20-30">20–30 ITEMS</option>
          </select>
        </div>
      </div>
        <div class="profile__order-container">
        <div class="profile__order-cat-wrap">
          <a href="#" class="profile__order-cat-link profile__order-cat-link--active" data-status="all">all</a>
          <a href="#" class="profile__order-cat-link" data-status="pending">pending</a>
          <a href="#" class="profile__order-cat-link" data-status="processing">processing</a>
          <a href="#" class="profile__order-cat-link" data-status="shipped">shipped</a>
          <a href="#" class="profile__order-cat-link" data-status="received">received</a>
          <a href="#" class="profile__order-cat-link" data-status="cancelled">cancelled</a>
          <a href="#" class="profile__order-cat-link" data-status="returned">returned</a>
        </div>
        <div class="profile__order-wrap">
          {% assign orders = customer.orders %}
          {% assign orders_per_page = 10 %}
          {% assign total_pages = orders.size | divided_by: orders_per_page | ceil %}
          {% assign current_page = 1 %}
          
          {% for order in orders limit: orders_per_page %}
            <div class="profile__order-block" data-order-status="{{ order.financial_status }}">
              <div class="profile__order-date-wrap">
                <span class="profile__order-date">{{ order.created_at | date: "%B %d, %Y" }}</span>
                <span class="profile__order-status">{{ order.financial_status }}: {{ order.fulfillment_status | default: 'unfulfilled' }}</span>
              </div>
              <ul class="profile__order-block-list">
                {% for line_item in order.line_items %}
                  <li class="profile__order-block-item">
                    <div class="profile__order-img-wrap">
                      <img 
                        src="{{ line_item.image | img_url: '100x' }}" 
                        alt="{{ line_item.title }}" 
                        class="profile__order-img"
                        width="100"
                        height="100"
                      >
                    </div>
                    <div class="profile__order-desc-wrap">
                      <span class="profile__order-item-name">{{ line_item.title }}</span>
                      <span class="profile__order-item-variant">{{ line_item.variant.title }}</span>
                      <span class="profile__order-item-qty">{{ line_item.quantity }} {% if line_item.quantity == 1 %}piece{% else %}pieces{% endif %}</span>
                      <span class="profile__order-item-price">{{ line_item.final_price | money }}</span>
                      {% if line_item.properties.subscription_id %}
                        <span class="profile__order-item-sub">Monthly Subscription</span>
                      {% endif %}
                    </div>
                  </li>
                {% endfor %}
              </ul>
              <div class="profile__order-button-container">
                <div class="profile__order-button-wrap">
                  {% if order.financial_status == 'pending' %}
                    <a href="/pages/profile-confirm-order?order={{ order.id }}" class="profile__order-btn-link">pay now</a>
                  {% endif %}
                  {% if order.fulfillment_status == 'shipped' %}
                    <a href="#" class="profile__order-btn-link">track order</a>
                  {% endif %}
                  {% if order.fulfillment_status == 'fulfilled' %}
                    <a href="#" class="profile__order-btn-link">order again</a>
                    <a href="#" class="profile__order-btn-link profile__order-btn-link--white">add review</a>
                  {% endif %}
                  <a href="#" class="profile__order-btn-link profile__order-btn-link--white">contact us</a>
                </div>
                <div class="profile__order-ttl-wrap">
                  <span class="profile__order-ttl-txt">order total: </span>
                  <span class="profile__order-ttl-price">{{ order.total_price | money }}</span>
                </div>
              </div>
            </div>
          {% endfor %}

          {% if total_pages > 1 %}
            <div class="pagination">
              <div class="pagination__container">
                {% if current_page > 1 %}
                  <a href="?page={{ current_page | minus: 1 }}" class="pagination__link">Previous</a>
                {% endif %}
                
                {% for page in (1..total_pages) %}
                  <a href="?page={{ page }}" class="pagination__link {% if page == current_page %}pagination__link--active{% endif %}">
                    {{ page }}
                  </a>
                {% endfor %}
                
                {% if current_page < total_pages %}
                  <a href="?page={{ current_page | plus: 1 }}" class="pagination__link">Next</a>
                {% endif %}
              </div>
            </div>
          {% endif %}
        </div>
      </div>
      </section>
      
      <section class="profile__section" id="my-account-section">
        <div class="profile__order-heading-wrap">
          <h2 class="profile__order-heading">Account</h2>
        </div>
        <div class="profile__order-container">
          <div class="profile__order-cat-wrap flex-start">
            <a href="#" id="profile-tab" class="profile__order-cat-link profile__order-cat-link--active">PROFILE</a>
            <a href="#" id="addresses-tab" class="profile__order-cat-link">ADDRESSES</a>
            <a href="#" id="deletion-tab" class="profile__order-cat-link">ACCOUNT DELETION</a>
          </div>
          
          <div id="profile-section" class="profile__account-wrap" style="padding-bottom: 20px;">
            <h3 class="profile__account-heading">Manage and protect your account</h3>
            <div class="profile__account-info-wrap">
              
            {% if customer %}
              <div class="profile__account-info-block">
                <form class="profile__account-info-container" method="post" action="/account">
                  <div class="profile__account-info-row row-flex">
                    <div class="profile__account-row-block">
                      <img class="profile__account-info-icon" src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/Vector_2.svg?v=1746218281">
                      <label for="first-name">First Name</label>
                      <input type="text" id="first-name" name="customer[first_name]" value="{{ customer.first_name }}" placeholder="First Name">
                    </div>
                    <div class="profile__account-row-block">
                      <img class="profile__account-info-icon" src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/Vector_2.svg?v=1746218281">
                      <label for="last-name">Last Name</label>
                      <input type="text" id="last-name" name="customer[last_name]" value="{{ customer.last_name }}" placeholder="Last Name">
                    </div>
                  </div>
              
                  <div class="profile__account-info-row">
                    <img class="profile__account-info-icon" src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/Vector_3.svg?v=1746218281">
                    <label for="dob">Date of Birth</label>
                    <input type="text" id="dob" name="customer[note][dob]" value="{{ customer.note.dob }}" placeholder="MM/DD/YYYY">
                  </div>
              
                  <div class="profile__account-info-row">
                    <img class="profile__account-info-icon" src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/mdi-light_phone.svg?v=1746218281">
                    <label for="phone">Phone Number</label>
                    <input type="tel" id="phone" name="customer[phone]" value="{{ customer.phone }}" placeholder="Phone Number">
                  </div>
              
                  <div class="profile__account-info-row">
                    <img class="profile__account-info-icon" src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/stash_person-light.svg?v=1746218418">
                    <label for="email">Email</label>
                    <input type="email" id="email" name="customer[email]" value="{{ customer.email }}" placeholder="Email">
                  </div>
              
                  <div class="profile__account-info-row">
                    <img class="profile__account-info-icon" src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/circum_lock.svg?v=1746218282">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="customer[password]" placeholder="New Password">
                    <span id="togglePassword" class="toggle-eye"></span>
                  </div>
              
                  <button class="profile__account-btn-submit" type="submit">Update Account Information</button>
                </form>
              </div>
            {% endif %}
  
  
              
            <!-- <div class="profile__account-pic-block">
              <div class="profile__account-pic-box">
                <img class="profile__account-pic" src="https://cdn.shopify.com/s/files/1/0723/0839/2168/files/img_prof-pic_1.png?v=1746477596">
              </div>
              <label class="profile__account-input-label" for="imageInput">Select Image</label>
              
              <span class="profile__account-input-note">File size: maximum 1MB<br>File extension: .JPEG, .PNG</span>
            </div> -->
              
            </div>
          </div>
          
                            <!-- ADDRESS SECTION -->
          <!-- Add Address Button -->
          <div id="addresses-section" class="profile__account-wrap hide" style="padding-top: 20px;">
            <button onclick="document.getElementById('add-address-modal').style.display='flex'" style="padding: 20px 20px; background-color: #000; color: #fff; border: none; cursor: pointer; font-size: 16px; text-transform: uppercase;">
              ADD NEW ADDRESS &nbsp;&nbsp;+
            </button>
            
                    <!-- Address List -->
            <ul style="list-style: none; padding: 0; margin-top: 30px;">
              {% for address in customer.addresses %}
                <li style="display: flex; justify-content: space-between; align-items: center; padding: 18px 0; border-bottom: 1px solid #ddd;">
                  
                  <!-- Left: Address Details -->
                  <div style="display: flex; align-items: center; gap: 10px;">
                    <!-- Location Icon -->
                    <svg style="width: 16px; height: 16px; fill: #000;" viewBox="0 0 24 24">
                      <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5S10.62 6.5 12 6.5s2.5 1.12 2.5 2.5S13.38 11.5 12 11.5z"/>
                    </svg>
                    <span style="font-size: 13px; font-family: 'Poppins', sans-serif; color: #000;">
                      {{ address.address1 }},
                      {% if address.address2 != blank %}{{ address.address2 }},{% endif %}
                      {{ address.city }}, {{ address.province }}, {{ address.zip }}, {{ address.country }}
                    </span>
            
                    {% if address == customer.default_address %}
                      <span style="font-size: 10px; text-transform: uppercase; border: 1px solid #888; padding: 2px 6px; margin-left: 10px;">Default</span>
                    {% endif %}
                  </div>
            
                  <!-- Right: Action Buttons -->
                  <div style="text-align: right;">
                      <button 
                        class="edit-address-button" 
                        data-id="{{ address.id }}"
                        data-address1="{{ address.address1 }}"
                        data-address2="{{ address.address2 }}"
                        data-city="{{ address.city }}"
                        data-province="{{ address.province }}"
                        data-zip="{{ address.zip }}"
                        data-country="{{ address.country }}"
                        data-default="{% if address.id == customer.default_address.id %}true{% else %}false{% endif %}"
                        style="font-size: 11px; text-transform: uppercase; color: #000; display: block; margin-bottom: 4px; background: none; border: none; cursor: pointer;">
                        Edit
                      </button>
  
                    <form class="delete-address-form" method="post" action="/account/addresses/{{ address.id }}" style="margin: 0;">
                      <input type="hidden" name="_method" value="delete">
                      <button type="submit" style="font-size: 11px; text-transform: uppercase; color: #000; background: none; border: none; cursor: pointer;">Delete</button>
                    </form>
                  </div>
            
                </li>
              {% endfor %}
            </ul>
    
            
            <!-- Modal Overlay -->
            <div id="add-address-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0,0,0,0.5); justify-content: center; align-items: center; z-index: 999;">
              <div style="background: #fff; padding: 30px; max-width: 600px; width: 100%; box-sizing: border-box; position: relative;">
            
                <!-- Modal Heading -->
                <h2 style="text-align: center; margin-top: 0; margin-bottom: 30px; font-family: 'Alata', sans-serif;">DELIVERY ADDRESS</h2>
            
                <!-- Form -->
                <form id="add-address-form" accept-charset="UTF-8">
                  <input type="hidden" name="form_type" value="customer_address">
                  <input type="hidden" name="utf8" value="✓">
                
            
                  <!-- Address -->
                  <div style="margin-bottom: 20px;">
                    <input type="text" name="address[address1]" placeholder="Street Address" style="width: 100%; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                  </div>
            
                  <!-- 2 Column Fields -->
                  <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                    <input type="text" name="address[city]" placeholder="City" style="flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                    <input type="text" name="address[province]" placeholder="State" style="flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                  </div>
            
                  <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                    <input type="text" name="address[zip]" placeholder="ZIP Code" style="flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                    <input type="text" name="address[country]" placeholder="Country" value="United States" style="background-color: #EBEBE4; flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;" disabled>
                  </div>
            
                  <!-- Checkbox -->
                  <label style="display: flex; align-items: center; margin-bottom: 20px; font-size: 13px;">
                    <input type="checkbox" name="address[default]" value="1" style="margin-right: 10px; width: 16px; height: 16px; accent-color: #000000;"> 
                    Set As Default Address
                  </label>
            
                  <!-- Buttons -->
                  <div style="display: flex; gap: 10px;">
                    <button type="button" onclick="document.getElementById('add-address-modal').style.display='none'" style="flex: 1; padding: 14px; background: #fff; border: 1px solid #000; font-size: 13px; cursor: pointer;">CANCEL</button>
                    <button type="submit" style="flex: 1; padding: 14px; background: #000; color: #fff; border: none; font-size: 13px; cursor: pointer;">SAVE</button>
                  </div>
                </form>
              </div>
            </div>
  
            <div id="edit-address-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background-color: rgba(0,0,0,0.5); justify-content: center; align-items: center; z-index: 999;">
              <div style="background: #fff; padding: 30px; max-width: 600px; width: 100%; box-sizing: border-box; position: relative;">
            
                <h2 style="text-align: center; margin-top: 0; margin-bottom: 30px; font-family: 'Alata', sans-serif;">EDIT ADDRESS</h2>
            
                <form id="edit-address-form" method="post" accept-charset="UTF-8">
                  <input type="hidden" name="_method" value="put">
                  <input type="hidden" name="form_type" value="customer_address">
                  <input type="hidden" name="utf8" value="✓">
                  <input type="hidden" id="edit-address-id" name="id" value="">
            
                  <!-- Fields (same as Add Modal) -->
                  <div style="margin-bottom: 20px;">
                    <input type="text" name="address[address1]" id="edit-address1" placeholder="Street Address" style="width: 100%; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                  </div>
                  <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                    <input type="text" name="address[city]" id="edit-city" placeholder="City" style="flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                    <input type="text" name="address[province]" id="edit-province" placeholder="State" style="flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                  </div>
                  <div style="display: flex; gap: 10px; margin-bottom: 15px;">
                    <input type="text" name="address[zip]" id="edit-zip" placeholder="ZIP Code" style="flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;">
                    <input type="text" name="address[country]" id="edit-country" placeholder="Country" style="background-color: #EBEBE4; flex: 1; padding: 14px 16px; font-weight: bold; border: 1px solid #000; font-size: 14px;" disabled>
                  </div>
                  <label style="display: flex; align-items: center; margin-bottom: 20px; font-size: 13px;">
                    <input type="checkbox" name="address[default]" value="1" id="edit-default" style="margin-right: 10px; width: 16px; height: 16px; accent-color: #000000;"> 
                    Set As Default Address
                  </label>
            
                  <!-- Buttons -->
                  <div style="display: flex; gap: 10px;">
                    <button type="button" onclick="document.getElementById('edit-address-modal').style.display='none'" style="flex: 1; padding: 14px; background: #fff; border: 1px solid #000; font-size: 13px; cursor: pointer;">CANCEL</button>
                    <button type="submit" style="flex: 1; padding: 14px; background: #000; color: #fff; border: none; font-size: 13px; cursor: pointer;">UPDATE</button>
                  </div>
                </form>
              </div>
            </div>
  
                        
          </div>
                        
  
          <div id="deletion-section" class="profile__account-wrap hide">
            <p>Request to delete your account will go here.</p>
          </div>
  
        </div>
      </section>


      <section class="profile__section" id="my-wishlist-section">
        <div class="profile__order-heading-wrap">
          <h2 class="profile__order-heading">My Wishlist</h2>
          <div class="profile-sub__order-filer">
            <select>
              <option>5–10 ITEMS</option>
              <option>10–20 ITEMS</option>
              <option>20–30 ITEMS</option>
            </select>
          </div>
        </div>
  
        <div class="profile__order-container" style="padding-top: 20px; padding-bottom: 20px;">
          <div id="wishlist-container" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); justify-content: center; width: 100%; gap: 20px;">
            <!-- Wishlist items will be dynamically inserted here -->
            <div
              id="empty-wishlist-message"
              style="grid-column: span 4; text-align: center; padding: 50px 0; display: none;"
            >
              <p style="font-size: 16px;">Your wishlist is empty.</p>
              <a href="/collections/all" class="profile-sub__order-btn-link" style="margin: 20px auto;"
                >BROWSE PRODUCTS</a
              >
            </div>
          </div>
        </div>
        <!-- Quick Add Modal -->
        <div id="quick-add-modal" class="x:fixed x:inset-0 x:bg-black/50 x:z-50 x:hidden x:items-center x:justify-center">
          <div class="x:bg-white x:p-10 x:rounded x:min-w-2xl x:relative x:overflow-y-auto">
            <button
              id="close-modal"
              class="x:absolute x:top-4 x:right-4 x:text-black x:text-xl x:font-bold x:hover:text-gray-500"
            >
              &times;
            </button>
        
            <div class="x:flex x:flex-col x:gap-4">
              <h3 id="modal-product-title" class="x:text-3xl x:font-medium"></h3>
        
              <div class="x:flex x:flex-col x:gap-2">
                <div class="x:flex x:items-center x:gap-3">
                  <div class="x:flex x:items-center x:gap-1">
                    <span>5.0</span>
                    <span class="x:flex x:items-center x:gap-1">
                      {% render 'icon', icon: 'rating-star' %}
                      {% render 'icon', icon: 'rating-star' %}
                      {% render 'icon', icon: 'rating-star' %}
                      {% render 'icon', icon: 'rating-star' %}
                      {% render 'icon', icon: 'rating-star' %}
                    </span>
                  </div>
        
                  <span>3 reviews</span>
                </div>
                <span
                  >Available for <span class="x:capitalize x:underline">pickup</span> and
                  <span class="x:capitalize x:underline">delivery</span></span
                >
              </div>
        
              <hr>
        
              <div class="x:flex x:flex-col x:gap-1">
                <div class="x:flex x:items-center x:gap-1">
                  <span>Product Code: </span>
                  <span>4014</span>
                </div>
                <div class="x:flex x:items-center x:gap-1">
                  {% render 'icon', icon: 'map-pin' %}
                  <span class="x:underline">See It In Person</span>
                </div>
              </div>
        
              <!-- Variant Swatches (placeholder) -->
              <div style="display: flex; gap: 6px;" id="modal-swatches">
                <!-- Swatches will be copied from product card -->
              </div>
        
              <hr>
        
              <div class="x:flex x:flex-col x:gap-2" id="modal-variants">
                {% comment %}Variants will be dynamically inserted here{% endcomment %}
              </div>
        
              <hr>
        
              <div class="x:w-full x:flex x:justify-between">
                <div class="x:flex x:items-center x:border x:border-gray-300 x:rounded x:w-24">
                  <button id="decrease-qty" class="x:px-2 x:py-1 x:text-lg x:font-medium">-</button>
                  <span id="modal-product-quantity" class="x:w-12 x:text-center x:py-1">1</span>
                  <button id="increase-qty" class="x:px-2 x:py-1 x:text-lg x:font-medium">+</button>
                </div>
            
                <p id="modal-product-price" class="x:text-lg x:font-medium"></p>
              </div>
        
              <div class="x:flex x:flex-col x:gap-2 x:mt-4">
                <button id="modal-add-to-cart" class="profile-sub__order-btn-link x:w-full">ADD TO CART</button>
                <div class="x:flex x:gap-2">
                  <button
                    id="modal-add-to-wishlist"
                    class="profile-sub__order-btn-link profile-sub__order-btn-link--white x:w-full"
                  >
                    ADD TO WISHLIST
                  </button>
                  <button id="modal-subscribe" class="profile-sub__order-btn-link profile-sub__order-btn-link--white x:w-full">
                    SUBSCRIBE AND SAVE
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <script>
          // Script for Wishlist
          document.addEventListener("DOMContentLoaded", function () {
            const links = document.querySelectorAll(".profile-sub__order-cat-link");
            
            // Render wishlist items
            renderWishlistItems();
            
            // Listen for wishlist updates
            document.addEventListener('wishlist:updated', function(event) {
              renderWishlistItems();
            });
        
            // Modal elements
            const modal = document.getElementById('quick-add-modal');
            const closeModal = document.getElementById('close-modal');
            const modalTitle = document.getElementById('modal-product-title');
            
            let currentProduct = null;
        
            // Ensure modal is hidden initially
            if (modal) {
              modal.style.display = 'none';
              modal.classList.remove('x:flex');
              modal.classList.add('x:hidden');
            }
            
            // Close modal when clicking the close button or outside the modal
            if (closeModal) {
              closeModal.addEventListener('click', () => {
                modal.classList.remove('x:flex');
                modal.classList.add('x:hidden');
                modal.style.display = 'none';
              });
            }
            
            modal.addEventListener('click', (e) => {
              if (e.target === modal) {
                modal.classList.remove('x:flex');
                modal.classList.add('x:hidden');
                modal.style.display = 'none';
              }
            });
        
            // Add click event listeners to cart icons
            function addCartIconListeners() {
              document.querySelectorAll('.cart-icon').forEach(icon => {
                icon.addEventListener('click', function(e) {
                  e.preventDefault();
                  e.stopPropagation();
                  const productId = this.getAttribute('data-product-id');
                  const wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
                  const product = wishlist.find(item => item.id === productId);
                  
                  if (product) {
                    openProductModal(product);
                  }
                });
              });
            }
            
            function openProductModal(product) {
              console.log('openProductModal called with:', product);
              if (!modal || !modalTitle) {
                console.error('Modal elements not found:', { modal, modalTitle });
                return;
              }
              
              currentProduct = product;
              
              // Set basic content
              modalTitle.textContent = product.title;
              
              // Set price
              const modalPrice = document.getElementById('modal-product-price');
              if (modalPrice) {
                modalPrice.textContent = typeof product.price === 'number' ? 
                  `$${(product.price / 100).toFixed(2)}` : 
                  "$" + product.price;
              }
        
              // Set variants
              const modalVariants = document.getElementById('modal-variants');
              if (modalVariants && product.variants) {
                let variantsHtml = '';
                
                // Group variants by option name (e.g., "Size", "Color", etc.)
                const variantGroups = {};
                product.variants.forEach(variant => {
                  if (variant.option2) {
                    if (!variantGroups[variant.option2_name || 'Color']) {
                      variantGroups[variant.option2_name || 'Color'] = new Set();
                    }
                    variantGroups[variant.option2_name || 'Color'].add(variant.option2);
                  }
                  if (variant.option3) {
                    if (!variantGroups[variant.option3_name || 'Material']) {
                      variantGroups[variant.option3_name || 'Material'] = new Set();
                    }
                    variantGroups[variant.option3_name || 'Material'].add(variant.option3);
                  }
                });
        
                // Create HTML for each variant group
                Object.entries(variantGroups).forEach(([groupName, values]) => {
                  variantsHtml += `
                    <div class="x:flex x:flex-col x:gap-2">
                      <span class="x:text-lg x:font-medium">${groupName}</span>
                      <div class="x:flex x:flex-col x:flex-wrap x:gap-2">
                        ${Array.from(values).map(value => `
                          <div class="x:flex x:items-center x:gap-2">
                            <input
                              type="checkbox"
                              class="variant-option x:h-5 x:w-5 x:appearance-none x:border x:border-gray-300 x:rounded x:checked:bg-black x:checked:border-black x:bg-center x:bg-no-repeat x:checked:bg-[url('data:image/svg+xml;charset=utf-8,%3Csvg%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%2016%2016%22%3E%3Cpath%20d%3D%22M12.207%204.793a1%201%200%20010%201.414l-5%205a1%201%200%2001-1.414%200l-2-2a1%201%200%20011.414-1.414L6.5%209.086l4.293-4.293a1%201%200%20011.414%200z%22%20fill%3D%22%23fff%22%2F%3E%3C%2Fsvg%3E')]"
                              data-option-name="${groupName}"
                              data-option-value="${value}"
                            >
                            <label class="x:text-base">${value}</label>
                          </div>
                        `).join('')}
                      </div>
                    </div>
                  `;
                });
        
                modalVariants.innerHTML = variantsHtml;
        
                // Add event listeners to variant checkboxes
                modalVariants.querySelectorAll('.variant-option').forEach(checkbox => {
                  checkbox.addEventListener('change', function() {
        
                    // Uncheck other checkboxes in the same group
                    const groupCheckboxes = modalVariants.querySelectorAll(`input[data-option-name="${this.dataset.optionName}"]`);
                    groupCheckboxes.forEach(cb => {
                      if (cb !== this) cb.checked = false;
                    });
        
                    // Update selected variant and price
                    updateSelectedVariant();
                  });
                });
              }
        
              // Copy swatches from product card
              const productCard = document.querySelector(`[data-product-id="${product.id}"]`).closest('[style*="width: 250px"]');
              const productSwatches = productCard.querySelector('.variant-picker__option-values');
              const modalSwatches = document.getElementById('modal-swatches');
              if (productSwatches && modalSwatches) {
                modalSwatches.innerHTML = productSwatches.innerHTML;
                
                // Add event listeners to modal swatches
                modalSwatches.querySelectorAll('.variant-picker__option-value').forEach(swatch => {
                  swatch.addEventListener('click', function() {
                    selectSwatch(this);
                  });
                  swatch.addEventListener('mouseover', function() {
                    hoverSwatch(this);
                  });
                  swatch.addEventListener('mouseout', function() {
                    unhoverSwatch(this);
                  });
                });
              }
        
              // Update quantity buttons
              const decreaseQty = document.getElementById('decrease-qty');
              const increaseQty = document.getElementById('increase-qty');
              const quantityDisplay = document.getElementById('modal-product-quantity');
              
              if (decreaseQty && increaseQty && quantityDisplay) {
                decreaseQty.onclick = () => {
                  const currentQty = parseInt(quantityDisplay.textContent);
                  if (currentQty > 1) {
                    quantityDisplay.textContent = currentQty - 1;
                  }
                };
                
                increaseQty.onclick = () => {
                  const currentQty = parseInt(quantityDisplay.textContent);
                  quantityDisplay.textContent = currentQty + 1;
                };
              }
        
              // Update add to cart button
              const addToCartBtn = document.getElementById('modal-add-to-cart');
              if (addToCartBtn) {
                // Set data attributes for the product
                addToCartBtn.setAttribute('data-product-id', product.id);
                addToCartBtn.setAttribute('data-product-title', product.title);
                addToCartBtn.setAttribute('data-product-image', product.image);
                addToCartBtn.setAttribute('data-product-price', typeof product.price === 'number' ? 
                  `$${(product.price / 100).toFixed(2)}` : 
                  "$" + product.price);
                addToCartBtn.setAttribute('data-product-type', product.type || '');
                addToCartBtn.setAttribute('data-product-handle', product.handle || '');
                addToCartBtn.setAttribute('data-product-variants', JSON.stringify(product.variants || []));
                addToCartBtn.setAttribute('data-product-options', JSON.stringify(product.options_with_values || []));
        
                addToCartBtn.onclick = () => {
                  const quantity = parseInt(document.getElementById('modal-product-quantity').textContent);
                  const selectedVariant = getSelectedVariant();
                  if (selectedVariant) {
                    // Add to cart functionality
                    let formData = {
                      'items': [{
                        'id': selectedVariant.id,
                        'quantity': quantity
                      }]
                    };
                    
                    // First, prepare the sections for bundling
                    document.documentElement.dispatchEvent(new CustomEvent('cart:prepare-bundled-sections', {
                      bubbles: true,
                      detail: {
                        sections: ['cart-drawer']
                      }
                    }));
                    
                    fetch('/cart/add.js', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                      // Get updated cart data
                      return fetch('/cart.js')
                        .then(response => response.json())
                        .then(cart => {
                          // Get the sections HTML
                          return fetch(`/?sections=cart-drawer`)
                            .then(response => response.json())
                            .then(sections => {
                              // Add sections data to cart
                              cart.sections = sections;
                              
                              // Dispatch cart:change event with the updated cart data
                              document.documentElement.dispatchEvent(new CustomEvent('cart:change', {
                                bubbles: true,
                                detail: {
                                  baseEvent: 'variant:add',
                                  cart: cart
                                }
                              }));
        
                              // Show cart drawer
                              const drawer = document.querySelector('cart-drawer');
                              if (drawer) {
                                // Update the drawer's content
                                const drawerContent = drawer.querySelector('.cart-drawer__content');
                                if (drawerContent && sections['cart-drawer']) {
                                  drawerContent.innerHTML = sections['cart-drawer'];
                                }
        
                                // Show the drawer
                                drawer.style.display = 'block';
                                // Force a reflow
                                drawer.offsetHeight;
                                drawer.classList.remove('x:-translate-y-full');
                                drawer.classList.add('x:translate-y-0');
        
                                // Update cart count if it exists
                                const cartCount = document.querySelector('.cart-count-bubble');
                                if (cartCount) {
                                  cartCount.textContent = cart.item_count;
                                }
                              }
        
                              // Close the modal
                              modal.classList.remove('x:flex');
                              modal.classList.add('x:hidden');
                              modal.style.display = 'none';
                            });
                        });
                    })
                    .catch((error) => {
                      console.error('Error:', error);
                      alert('Error adding item to cart');
                    });
                  }
                };
              }
        
              // Update wishlist button
              const wishlistBtn = document.getElementById('modal-add-to-wishlist');
              if (wishlistBtn) {
                wishlistBtn.textContent = 'REMOVE FROM WISHLIST';
                wishlistBtn.onclick = () => {
                  removeFromWishlist(product.id);
                  modal.classList.remove('x:flex');
                  modal.classList.add('x:hidden');
                  modal.style.display = 'none';
                };
              }
        
              // Update subscribe button
              const subscribeBtn = document.getElementById('modal-subscribe');
              if (subscribeBtn) {
                subscribeBtn.onclick = () => {
                  // Add subscription logic here
                  alert('Subscription feature coming soon!');
                };
              }
        
              // Show modal
              modal.classList.remove('x:hidden');
              modal.classList.add('x:flex');
              modal.style.display = 'flex';
            }
        
            function getSelectedVariant() {
              if (!currentProduct || !currentProduct.variants) return null;
        
              const selectedOptions = {};
              document.querySelectorAll('.variant-option.x\\:bg-black').forEach(checkbox => {
                selectedOptions[checkbox.dataset.optionName] = checkbox.dataset.optionValue;
              });
        
              return currentProduct.variants.find(variant => {
                return (!selectedOptions[variant.option1_name] || variant.option1 === selectedOptions[variant.option1_name]) &&
                       (!selectedOptions[variant.option2_name] || variant.option2 === selectedOptions[variant.option2_name]) &&
                       (!selectedOptions[variant.option3_name] || variant.option3 === selectedOptions[variant.option3_name]);
              });
            }
        
            function updateSelectedVariant() {
              const selectedVariant = getSelectedVariant();
              if (selectedVariant) {
                const modalPrice = document.getElementById('modal-product-price');
                if (modalPrice) {
                  modalPrice.textContent = typeof selectedVariant.price === 'number' ? 
                    `$${selectedVariant.price.toFixed(2)}` : selectedVariant.price;
                }
              }
            }
            
            function createProductCard(item) {
              const cardElement = document.createElement('div');
              cardElement.style = "width: 250px; height: 453px; background: #fff; display: flex; flex-direction: column; gap: 10px; box-sizing: border-box; cursor: pointer;";
              console.log('Creating card for item:', item);
              
              // Add click handler for the entire card
              cardElement.addEventListener('click', function(e) {
                console.log('Card clicked:', e.target);
                // Stop event propagation for specific elements
                if (e.target.closest('.swatch') || 
                    e.target.closest('img[src*="heart"]') || 
                    e.target.closest('.cart-icon')) {
                  e.stopPropagation();
                  return;
                }
                
                // Open modal for all other clicks
                e.preventDefault();
                e.stopPropagation();
                console.log('Opening modal for item:', item);
                openProductModal(item);
              });
        
              // Format price if available
              let formattedPrice = '';
              if (item.price) {
                formattedPrice = typeof item.price === 'number' ? 
                  `$${(item.price / 100).toFixed(2)}` : 
                  item.price;
              } else if (item.priceText) {
                formattedPrice = item.priceText;
              } else if (item.compare_at_price) {
                formattedPrice = typeof item.compare_at_price === 'number' ? 
                  `$${(item.compare_at_price / 100).toFixed(2)}` : 
                  item.compare_at_price;
              } else {
                formattedPrice = '$5.99'; // Default placeholder price
              }
        
              // Generate swatches HTML from variants
              let swatchesHtml = '';
              if (item.variants && item.variants.length > 0) {
                // Get all variants with their options
                const variants = item.variants.map(variant => {
                  const options = {};
                  if (variant.option1) options[variant.option1_name || 'Option 1'] = variant.option1;
                  if (variant.option2) options[variant.option2_name || 'Option 2'] = variant.option2;
                  if (variant.option3) options[variant.option3_name || 'Option 3'] = variant.option3;
                  return { ...variant, options };
                });
        
                // Group variants by their first option (usually color)
                const groupedVariants = variants.reduce((acc, variant) => {
                  const firstOption = Object.values(variant.options)[0];
                  if (!acc[firstOption]) {
                    acc[firstOption] = [];
                  }
                  acc[firstOption].push(variant);
                  return acc;
                }, {});
        
                // Create swatches for each group
                swatchesHtml = Object.entries(groupedVariants).map(([optionValue, variants], index) => {
                  const firstVariant = variants[0];
                  // Get the variant image using featured_media
                  const variantImage = firstVariant.featured_media?.src || firstVariant.featured_image?.src || item.featured_media?.src || item.image;
                  return `
                    <div 
                      class="variant-picker__option-value variant-picker__option-value--swatch"
                      style="width: 25px; height: 25px; background-color: ${optionValue}; position: relative; cursor: pointer;"
                      onclick="selectSwatch(this)"
                      onmouseover="hoverSwatch(this)"
                      onmouseout="unhoverSwatch(this)"
                      data-variant-id="${firstVariant.id}"
                      data-variants='${JSON.stringify(variants)}'
                      data-selected="${index === 0 ? 'true' : 'false'}"
                      data-image="${variantImage}"
                      title="${optionValue}"
                    >
                      <input 
                        type="radio" 
                        class="sr-only" 
                        name="option-${item.id}" 
                        value="${optionValue}"
                        ${index === 0 ? 'checked' : ''}
                      >
                      <span class="variant-picker__option-value__label">
                        <span class="variant-picker__option-value__swatch" style="background-color: ${optionValue};"></span>
                      </span>
                      <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -6px; left: 0; width: 100%; height: 2px; background-color: ${optionValue}; opacity: 0; transition: opacity 0.2s ease;"></span>
                    </div>
                  `;
                }).join('');
        
                // Add default swatch if no variants
                if (!swatchesHtml) {
                  swatchesHtml = `
                    <div 
                      class="variant-picker__option-value variant-picker__option-value--swatch"
                      style="width: 25px; height: 25px; background-color: #d1bb9f; position: relative; cursor: pointer;"
                      onclick="selectSwatch(this)"
                      data-selected="true"
                    >
                      <input 
                        type="radio" 
                        class="sr-only" 
                        name="option-${item.id}" 
                        value="default"
                        checked
                      >
                      <span class="variant-picker__option-value__label">
                        <span class="variant-picker__option-value__swatch" style="background-color: #d1bb9f;"></span>
                      </span>
                      <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -2px; left: 0; width: 100%; height: 2px; background-color: #d1bb9f; opacity: 1;"></span>
                    </div>
                  `;
                }
              }
              
              const title = item.title || 'Untitled Product';
              console.log('Creating card for item:', item);
              
              cardElement.innerHTML = `
                <!-- Image (250x250) with Heart -->
                <div style="width: 100%; height: 250px; overflow: hidden; position: relative; cursor: pointer;" onclick="openProductModal(${JSON.stringify(item)})">
                  <img 
                    src="${item.image || '{{ "test_img1.png" | asset_url }}'}" 
                    alt="${title}" 
                    class="product-image"
                    style="width: 100%; height: 100%; object-fit: cover; image-rendering: auto; transition: opacity 0.3s ease;" 
                    width="250" 
                    height="250"
                  />
                  <!-- Heart Icon (active) -->
                  <img 
                    src="{{ 'heart_black.png' | asset_url }}" 
                    alt="Remove from Wishlist" 
                    style="position: absolute; top: 8px; right: 8px; width: 16px; height: 16px; cursor: pointer;"
                    onclick="removeFromWishlist('${item.id}')"
                    width="16"
                    height="16"
                  />
                </div>
              
                <!-- Variant Swatches -->
                <div class="variant-picker__option-values wrap gap-2" style="display: flex; gap: 6px;">
                  ${swatchesHtml || `
                    <div 
                      class="variant-picker__option-value variant-picker__option-value--swatch x:m-1"
                      style="width: 25px; height: 25px; background-color: #d1bb9f; position: relative; cursor: pointer;"
                      onclick="selectSwatch(this)"
                      data-selected="true"
                    >
                      <input 
                        type="radio"
                        class="sr-only"
                        name="option-${item.id}"
                        value="default"
                        checked
                      >
                      <span class="variant-picker__option-value__label">
                        <span class="variant-picker__option-value__swatch" style="background-color: #d1bb9f;"></span>
                      </span>
                      <span class="variant-picker__option-value__underline" style="position: absolute; bottom: -2px; left: 0; width: 100%; height: 2px; background-color: #d1bb9f; opacity: 1;"></span>
                    </div>
                  `}
                </div>
              
                <!-- Category and Cart -->
                <div class="x:flex x:flex-col x:gap-1">
                  <div class="x:text-base x:flex x:justify-between x:items-center x:uppercase">
                    <span class="product-title" style="cursor: pointer;" onclick="openProductModal(${JSON.stringify(item)})">${title}</span>
                    <span class="cart-icon x:hover:scale-110 x:cursor-pointer x:transition-all x:duration-300" data-product-id="${item.id}">
                      {% render 'icon', icon: 'shop-cart' %}
                    </span>
                  </div>
                  
                  <!-- Price -->
                  <span class="x:text-base product-price">$${formattedPrice}</span>
                  
                  <!-- Certifications -->
                  {% render 'icon', icon: 'certificate' %}
                </div>
              `;
              // Trigger hoverSwatch for the default selected swatch after rendering
        setTimeout(() => {
          const defaultSwatch = cardElement.querySelector('.variant-picker__option-value[data-selected="true"]');
          if (defaultSwatch) hoverSwatch(defaultSwatch);
        }, 0);
        
              return cardElement;
            }
            
            function renderWishlistItems() {
              const wishlistContainer = document.getElementById('wishlist-container');
              const emptyWishlistMessage = document.getElementById('empty-wishlist-message');
              
              if (!wishlistContainer) {
                console.error('Wishlist container not found');
                return;
              }
              
              // Get wishlist from localStorage
              const wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
              console.log('Current wishlist:', wishlist);
              
              // Clear existing items
              wishlistContainer.innerHTML = '';
              
              // Show empty message if wishlist is empty
              if (wishlist.length <= 0) {
                wishlistContainer.innerHTML = `
                  <div
                    id="empty-wishlist-message"
                    style="grid-column: span 4; text-align: center; padding: 50px 0; display: block;"
                  >
                    <p style="font-size: 16px;">Your wishlist is empty.</p>
                    <a href="/collections/all" class="profile-sub__order-btn-link" style="margin: 20px auto;"
                      >BROWSE PRODUCTS</a
                    >
                  </div>
                `;
                // if (emptyWishlistMessage) {
                //   emptyWishlistMessage.style.display = 'block';
                //   wishlistContainer.appendChild(emptyWishlistMessage);
                // }
                // console.log('chek', wishlistContainer.innerHTML);
                return;
              }
              
              // Add items to container
              wishlist.forEach(item => {
                const productCard = createProductCard(item);
                wishlistContainer.appendChild(productCard);
              });
        
              // Add event listeners to cart icons after rendering
              addCartIconListeners();
            }
            
            // Make functions available globally
            window.openProductModal = openProductModal;
            window.removeFromWishlist = removeFromWishlist;
            window.selectSwatch = selectSwatch;
            window.renderWishlistItems = renderWishlistItems;
          });
        
          function hoverSwatch(el) {
            const productCard = el.closest('[style*="width: 250px"]');
            const productImage = productCard.querySelector('.product-image');
            const variantImage = el.dataset.image;
          
            // Remove all underlines
            productCard.querySelectorAll('.variant-picker__option-value__underline').forEach(underline => {
              underline.style.opacity = '0';
            });
          
            // Update image on hover
            if (productImage && variantImage && productImage.src !== variantImage) {
              productImage.style.opacity = '0.7';
              setTimeout(() => {
                productImage.src = variantImage;
                productImage.style.opacity = '1';
              }, 150);
            }
          
            // Show underline for hovered swatch
            const underline = el.querySelector('.variant-picker__option-value__underline');
            if (underline) {
              underline.style.opacity = '1';
            }
          }
          
          function unhoverSwatch(el) {
            const productCard = el.closest('[style*="width: 250px"]');
            const productImage = productCard.querySelector('.product-image');
            const selectedSwatch = productCard.querySelector('.variant-picker__option-value[data-selected="true"]');
          
            // Hide underline of currently unhovered swatch
            const underline = el.querySelector('.variant-picker__option-value__underline');
            if (underline) {
              underline.style.opacity = '0';
            }
          
            // Restore underline to selected swatch
            if (selectedSwatch && selectedSwatch !== el) {
              const selectedUnderline = selectedSwatch.querySelector('.variant-picker__option-value__underline');
              if (selectedUnderline) {
                selectedUnderline.style.opacity = '1';
              }
          
              // Also reset image to selected
              const selectedImage = selectedSwatch.dataset.image;
              if (productImage && selectedImage) {
                productImage.style.opacity = '0.7';
                setTimeout(() => {
                  productImage.src = selectedImage;
                  productImage.style.opacity = '1';
                }, 150);
              }
            }
          }
        
          function selectSwatch(el) {
            const container = el.parentElement;
            const variantId = el.dataset.variantId;
            const variants = JSON.parse(el.dataset.variants || '[]');
        
            // Remove selected state from all swatches
            container.querySelectorAll('.variant-picker__option-value').forEach(swatch => {
              swatch.removeAttribute('data-selected');
              swatch.classList.remove('is-selected');
              const radio = swatch.querySelector('input[type="radio"]');
              if (radio) radio.checked = false;
              
              // Hide underline
              const underline = swatch.querySelector('.variant-picker__option-value__underline');
              if (underline) {
                underline.style.opacity = '0';
              }
            });
        
            // Set selected state
            el.setAttribute('data-selected', 'true');
            el.classList.add('is-selected');
            const radio = el.querySelector('input[type="radio"]');
            if (radio) radio.checked = true;
        
            // Show underline for selected swatch
            const underline = el.querySelector('.variant-picker__option-value__underline');
            if (underline) {
              underline.style.opacity = '1';
            }
        
            // Update image
            const productCard = el.closest('[style*="width: 250px"]');
            const productImage = productCard.querySelector('.product-image');
            const variantImage = el.dataset.image;
            
            if (productImage && variantImage) {
              productImage.style.opacity = '0.7';
              setTimeout(() => {
                productImage.src = variantImage;
                productImage.style.opacity = '1';
              }, 150);
            }
        
            // Update price if variant has different price
            if (variants.length > 0) {
              const priceElement = productCard.querySelector('.product-price');
              
              if (priceElement) {
                const selectedVariant = variants[0]; // Use first variant of the group
                if (selectedVariant && selectedVariant.price) {
                  // Convert price to proper format (divide by 100 if it's in cents)
                  const price = typeof selectedVariant.price === 'number' ? 
                    (selectedVariant.price / 100).toFixed(2) : 
                    selectedVariant.price;
                  priceElement.textContent = `$${price}`;
                }
              }
            }
          }
          
          function removeFromWishlist(productId) {
            // Get current wishlist
            let wishlist = JSON.parse(localStorage.getItem('shopify_wishlist')) || [];
            
            // Find and remove the product
            const index = wishlist.findIndex(item => item.id === productId);
            if (index !== -1) {
              wishlist.splice(index, 1);
              
              // Save updated wishlist
              localStorage.setItem('shopify_wishlist', JSON.stringify(wishlist));
              
              // Re-render wishlist
              renderWishlistItems();
              renderWishlistItemsMobile();
              
              // Notify
              alert('Item removed from wishlist');
            }
          }
          
          function addToCart(productId, quantity = 1) {
            // Add to cart functionality
            let formData = {
              'items': [{
                'id': productId,
                'quantity': quantity
              }]
            };
            
            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
              alert('Item added to cart!');
              // Optionally refresh cart drawer or redirect
            })
            .catch((error) => {
              console.error('Error:', error);
              alert('Error adding item to cart');
            });
          }
        
          // Auto-select first swatch for each card on load
          window.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.swatch[data-selected="true"]').forEach(el => {
              selectSwatch(el);
            });
          });
        
          document.querySelectorAll('.variant-picker__option-value[data-selected="true"]').forEach(swatch => {
          hoverSwatch(swatch);
        });
        
        </script>
        
      </section>
                      
      
    </div>
  </div>
</div>


<script>
   // Script for category tabs
  document.addEventListener("DOMContentLoaded", function () {
    const links = document.querySelectorAll(".profile__order-cat-link");
    const orderBlocks = document.querySelectorAll(".profile__order-block");
    const orderFilter = document.getElementById("order-filter");

    // Filter by status
    links.forEach(link => {
      link.addEventListener("click", function (e) {
        e.preventDefault();
        const status = this.dataset.status;

        // Remove active class from all links
        links.forEach(l => l.classList.remove("profile__order-cat-link--active"));
        // Add active class to clicked link
        this.classList.add("profile__order-cat-link--active");

        // Show/hide orders based on status
        orderBlocks.forEach(block => {
          if (status === 'all' || block.dataset.orderStatus === status) {
            block.style.display = 'block';
          } else {
            block.style.display = 'none';
          }
        });
      });
    });

    // Filter by item count
    orderFilter.addEventListener("change", function() {
      const [min, max] = this.value.split('-').map(Number);
      
      orderBlocks.forEach(block => {
        const itemCount = block.querySelectorAll('.profile__order-block-item').length;
        if (itemCount >= min && itemCount <= max) {
          block.style.display = 'block';
        } else {
          block.style.display = 'none';
        }
      });
    });

    // Handle pagination
    const urlParams = new URLSearchParams(window.location.search);
    const currentPage = parseInt(urlParams.get('page')) || 1;
    const ordersPerPage = 10;
    const totalOrders = {{ customer.orders.size }};
    const totalPages = Math.ceil(totalOrders / ordersPerPage);

    // Update pagination links
    document.querySelectorAll('.pagination__link').forEach(link => {
      const pageNum = parseInt(link.textContent);
      if (pageNum === currentPage) {
        link.classList.add('pagination__link--active');
      }
    });
  });
</script>




<script>
  // Script for menu category tabs
  const menuItems = document.querySelectorAll('.profile__menu-item');
  const sections = document.querySelectorAll('.profile__section');

  menuItems.forEach(item => {
    item.addEventListener('click', () => {
      // Remove 'show' from all sections
      sections.forEach(section => section.classList.remove('show'));

      // Remove 'active' from all menu items
      menuItems.forEach(menu => menu.classList.remove('active'));

      // Add 'active' to the clicked menu item
      item.classList.add('active');

      // Get the target section ID (e.g., 'my-account' -> 'my-account-section')
      const targetId = item.id + '-section';
      const targetSection = document.getElementById(targetId);

      // Add 'show' to the target section
      if (targetSection) {
        targetSection.classList.add('show');
      }
    });
  });
</script>



<script>
   // Script for My Account tabs
  document.addEventListener("DOMContentLoaded", function () {
    const tabs = {
      "profile-tab": "profile-section",
      "addresses-tab": "addresses-section",
      "deletion-tab": "deletion-section"
    };

    function activateTab(tabId) {
      // Remove active class from all links
      document.querySelectorAll(".profile__order-cat-link").forEach(link =>
        link.classList.remove("profile__order-cat-link--active")
      );

      // Hide all tab sections
      Object.values(tabs).forEach(sectionId =>
        document.getElementById(sectionId).classList.add("hide")
      );

      // Show selected section and highlight tab
      document.getElementById(tabId).classList.add("profile__order-cat-link--active");
      document.getElementById(tabs[tabId]).classList.remove("hide");
    }

    // Initial tab from hash
    const hash = window.location.hash;
    if (hash === "#addresses-tab") {
      activateTab("addresses-tab");
    } else if (hash === "#deletion-tab") {
      activateTab("deletion-tab");
    } else {
      window.location.hash = "#profile-tab"; // set default hash
      activateTab("profile-tab");
    }


    // Handle tab clicks
    Object.keys(tabs).forEach(tabId => {
      document.getElementById(tabId).addEventListener("click", function (e) {
        e.preventDefault();
        window.location.hash = `#${tabId}`; // update the hash
        activateTab(tabId);
      });
    });
    
    const addressForm = document.getElementById("add-address-form");
    if (addressForm) {
      addressForm.addEventListener("submit", function (e) {
        e.preventDefault();
        const formData = new FormData(addressForm);

        fetch("/account/addresses", {
          method: "POST",
          body: formData,
          headers: { "Accept": "text/html" }
        })
        .then(response => {
          if (response.ok) {
            window.location.hash = "#addresses-tab";
            setTimeout(() => location.reload(), 100); 
          } else {
            alert("Failed to add address.");
          }
        })
        .catch(() => alert("Error submitting address."));
      });
    }
  });

  // Toggle password visibility
  const toggle = document.getElementById("togglePassword");
  const password = document.getElementById("password");

  if (toggle && password) {
    toggle.addEventListener("click", function () {
      const type = password.getAttribute("type") === "password" ? "text" : "password";
      password.setAttribute("type", type);
      this.style.backgroundImage = type === "password"
        ? "url(https://cdn.shopify.com/s/files/1/0723/0839/2168/files/hide.png?v=1746473941)"
        : "url(https://cdn.shopify.com/s/files/1/0723/0839/2168/files/show.png?v=1746473942)";
    });
  }

  function closeAddressModal() {
    document.getElementById('addressModal').style.display = 'none';
  }
  
  document.querySelectorAll('.delete-address-form').forEach(form => {
    form.addEventListener('submit', function (e) {
      e.preventDefault();
  
      const confirmed = confirm("Are you sure you want to delete this address?");
      if (!confirmed) return;
  
      const formData = new FormData(this);
  
      fetch(this.action, {
        method: "POST",
        body: formData,
        headers: { "Accept": "text/html" }
      })
      .then(response => {
        if (response.ok) {
           location.reload();
        } else {
          alert("Failed to delete address.");
        }
      })
      .catch(() => alert("Error deleting address."));
    });
  });
document.querySelectorAll('.edit-address-button').forEach(button => {
  button.addEventListener('click', () => {
    document.getElementById('edit-address-id').value = button.dataset.id;
    document.getElementById('edit-address1').value = button.dataset.address1 || '';
    document.getElementById('edit-city').value = button.dataset.city || '';
    document.getElementById('edit-province').value = button.dataset.province || '';
    document.getElementById('edit-zip').value = button.dataset.zip || '';
    document.getElementById('edit-country').value = button.dataset.country || '';
    document.getElementById('edit-default').checked = button.dataset.default === "true";

    document.getElementById('edit-address-modal').style.display = 'flex';
  });
});
const editForm = document.getElementById("edit-address-form");
if (editForm) {
  editForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const id = document.getElementById('edit-address-id').value;
    const formData = new FormData(editForm);

    fetch(`/account/addresses/${id}`, {
      method: "POST",
      body: formData,
      headers: { "Accept": "text/html" }
    })
    .then(response => {
      if (response.ok) {
        window.location.hash = "#addresses-tab";
        setTimeout(() => location.reload(), 100);
      } else {
        alert("Failed to update address.");
      }
    })
    .catch(() => alert("Error updating address."));
  });
}


</script>
