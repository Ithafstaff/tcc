{% comment %}
  <cart-drawer {% if request.design_mode %}handle-section-events{% endif %} class="cart-drawer drawer drawer--lg" id="cart-drawer">
    {%- if cart.item_count == 0 -%}
      <button is="close-button" aria-label="{{ 'general.accessibility.close' | t | escape }}">
        {%- render 'icon' with 'close' -%}
      </button>

      <div class="empty-state align-self-center">
        <div class="empty-state__icon-wrapper">
          {%- render 'icon' with 'cart', width: 32, height: 32, stroke_width: 1 -%}
          <span class="count-bubble count-bubble--lg">0</span>
        </div>

        <div class="prose">
          <p class="h5">{{ 'cart.general.empty' | t }}</p>

          {%- assign button_content = 'cart.general.continue_shopping' | t -%}
          {%- render 'button', href: settings.cart_empty_button_link, size: 'xl', content: button_content -%}
        </div>
      </div>
    {%- else -%}
      <div class="cart-drawer__inner">
        <div class="cart-drawer__top">
          <div class="h-stack items-center justify-between">
            <div class="h-stack grow gap-2 sm:gap-2.5">
              <p class="h5">{{- 'cart.general.title' | t -}}</p>
              <cart-count class="count-bubble count-bubble--md">{{ cart.item_count }}</cart-count>
            </div>

            <button type="button" is="close-button" class="drawer__close-icon">
              <span class="sr-only">{{ 'general.accessibility.close' | t }}</span>
              {%- render 'icon' with 'close' -%}
            </button>
          </div>

          {%- if settings.cart_show_free_shipping_threshold -%}
            {%- render 'free-shipping-bar' -%}
          {%- endif -%}
        </div>

        <div class="v-stack gap-6 sm:gap-8">
          <div class="cart-drawer__line-items">
            {%- for line_item in cart.items -%}
              {%- render 'line-item', line_item: line_item, show_desktop_quantity: true -%}
            {%- endfor -%}
          </div>

          {%- if section.settings.products.count > 0 -%}
            <div class="cart-drawer__recommendations">
              <div class="v-stack gap-2.5 sm:gap-4">
                {%- capture carousel_id -%}cart-drawer-recommendations{%- endcapture -%}

                {%- liquid
                  assign horizontal_products_blends = true
                  assign product_card_background = section.settings.product_card_background | default: product.settings.product_card_background

                  if product_card_background != 'rgba(0,0,0,0)' and product_card_background != blank and product_card_background != settings.dialog_background
                    assign horizontal_products_blends = false
                  endif

                  assign rendered_recommendations = 0

                  capture recommendations
                    for recommended_product in section.settings.products
                      assign item_count_in_cart = cart | line_items_for: recommended_product

                      if item_count_in_cart.size == 0
                        render 'horizontal-product', product: recommended_product, show_add_to_cart: true, background: section.settings.product_card_background, text_color: section.settings.product_card_text_color
                        assign rendered_recommendations = rendered_recommendations | plus: 1
                      endif
                    endfor
                  endcapture
                -%}

                {%- if rendered_recommendations > 0 -%}
                  <div class="h-stack justify-between gap-4">
                    {%- if section.settings.recommendations_title != blank -%}
                      <p>{{ section.settings.recommendations_title | escape }}</p>
                    {%- endif -%}

                    {%- if rendered_recommendations > 1 -%}
                      <div class="h-stack gap-2 hidden sm:flex">
                        <button is="prev-button" class="circle-chevron hover:colors" aria-controls="{{ carousel_id }}" aria-label="{{ 'general.accessibility.previous' | t | escape }}" disabled>{%- render 'icon' with 'chevron-left-small', direction_aware: true -%}</button>
                        <button is="next-button" class="circle-chevron hover:colors" aria-controls="{{ carousel_id }}" aria-label="{{ 'general.accessibility.next' | t | escape }}">{%- render 'icon' with 'chevron-right-small', direction_aware: true -%}</button>
                      </div>
                    {%- endif -%}
                  </div>
                {%- endif -%}

                {%- if recommendations != blank -%}
                  <scroll-carousel selector=".horizontal-product" id="{{ carousel_id }}" class="horizontal-product-list-carousel {% unless horizontal_products_blends %}separate{% endunless %} scroll-area bleed">
                    <div class="horizontal-product-list {% if horizontal_products_blends %}divide-x{% else %}separate{% endif %}">
                      {{- recommendations -}}
                    </div>
                  </scroll-carousel>
                {%- endif -%}
              </div>
            </div>
          {%- endif -%}
        </div>
      </div>

      <div class="v-stack gap-4 sm:gap-6" slot="footer">
        <div class="v-stack gap-1">
          {% for discount_application in cart.cart_level_discount_applications %}
            <div class="h-stack gap-4 justify-between">
              <div class="badge">
                {%- render 'icon' with 'discount' -%} {{- discount_application.title -}}
              </div>

              <span class="text-subdued">-{{ discount_application.total_allocated_amount | money }}</span>
            </div>
          {% endfor %}

          <div class="h-stack gap-4 justify-between">
            <span class="h5">{{ 'cart.general.total' | t }}</span>
            <span class="h5">{{- cart.total_price | money_with_currency -}}</span>
          </div>

          {%- if section.settings.show_shipping_text -%}
            {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
              <p class="text-subdued text-sm">{{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}</p>
            {%- elsif cart.taxes_included -%}
              <p class="text-subdued text-sm">{{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}</p>
            {%- elsif shop.shipping_policy.body != blank -%}
              <p class="text-subdued text-sm">{{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}</p>
            {%- else -%}
              <p class="text-subdued text-sm">{{ 'cart.general.taxes_and_shipping_at_checkout' | t }}</p>
            {%- endif -%}
          {%- endif -%}

          {%- if section.settings.show_cart_note -%}
            <button type="button" class="justify-self-start" aria-controls="cart-drawer-note">
              <span class="link text-sm text-subdued">
                {%- if cart.note == blank -%}
                  {{- 'cart.general.add_order_note' | t -}}
                {%- else -%}
                  {{- 'cart.general.edit_order_note' | t -}}
                {%- endif -%}
              </span>
            </button>

            <cart-note-dialog id="cart-drawer-note" class="cart-drawer__note">
              <div class="cart-drawer__note-inner">
                <div class="v-stack gap-4 sm:gap-6">
                  <p class="h5">{{ 'cart.general.order_note' | t }}</p>

                  <cart-note class="v-stack gap-4">
                    {%- assign order_note = 'cart.general.order_note' | t -%}
                    {%- assign order_save_label = 'cart.general.save_note' | t -%}

                    {%- render 'input', name: 'note', multiline: 3, label: order_note, value: cart.note -%}

                    <div class="justify-self-start">
                      {%- render 'button', type: 'button', content: order_save_label, size: 'lg', is: 'close-button', secondary: true -%}
                    </div>
                  </cart-note>
                </div>
              </div>
            </cart-note-dialog>
          {%- endif -%}
        </div>

        <form action="{{ routes.cart_url }}" method="POST" class="buy-buttons {% if section.settings.show_checkout_button %}buy-buttons--compact{% endif %}">
          {%- assign checkout_label = 'cart.general.checkout' | t -%}

          {%- if section.settings.show_view_cart_button or section.settings.show_checkout_button == false -%}
            <a href="{{ routes.cart_url }}" class="button button--xl {% if section.settings.show_checkout_button %}button--secondary{% endif %}" data-no-instant>
              {{- 'cart.general.view_cart' | t -}}
            </a>
          {%- endif -%}

          {%- if section.settings.show_checkout_button -%}
            {%- render 'button', type: 'submit', content: checkout_label, icon: 'picto-lock', name: 'checkout', size: 'xl' -%}
          {%- endif -%}
        </form>
      </div>
    {%- endif -%}
  </cart-drawer>
{% endcomment %}

<cart-drawer
  {% if request.design_mode %}
    handle-section-events
  {% endif %}
  id="cart-drawer"
  style="display: none;"
  class="x:fixed x:top-0 x:left-0 x:right-0 x:bg-white x:shadow-md x:z-[9999] x:py-10 x:px-16 x:max-w-full x:font-sans x:transform x:translate-y-0 x:transition-all x:duration-300 x:ease-in-out"
>
  <button 
    onclick="const drawer = document.querySelector('cart-drawer'); drawer.style.transform = 'translateY(-100%)'; setTimeout(() => drawer.style.display = 'none', 300);"
    class="x:absolute x:top-4 x:right-4 x:bg-transparent x:border-none x:cursor-pointer x:p-2"
  >
    {% render 'icon' with 'close', width: 32, height: 32 %}
  </button>
  <div class="x:flex x:justify-between x:items-start x:flex-wrap">
    <!-- Left side: image + confirmation -->
    <div class="x:flex x:flex-col x:gap-5 x:items-center">
      <p class="x:flex x:items-center x:gap-2 x:text-base">
        {% render 'icon' with 'check', width: 32, height: 32 %} 
        <strong><span data-cart-count>{{ cart.item_count }}</span> item{% if cart.item_count != 1 %}s{% endif %} added to your cart</strong>
      </p>
      {% if cart.items.size > 0 %}
        <img
          data-cart-item-image
          src="{{ cart.items.first.image | img_url: '120x' }}"
          alt="{{ cart.items.first.title }}"
          width="120"
          height="120"
          class="x:w-[120px] x:h-auto x:rounded"
        >
      {% endif %}
    </div>

    <!-- Right side: summary & buttons -->
    <div class="x:flex x:flex-col x:w-[30rem] x:m-5">
      <div class="x:flex x:items-center x:justify-between">
        <p class="x:m-0"><strong>Your cart:</strong> <span data-cart-count>{{ cart.item_count }}</span> item{% if cart.item_count != 1 %}s{% endif %}</p>
        <p><strong>Subtotal:</strong> $<span data-cart-subtotal>{{ cart.total_price | divided_by: 100.0 }}</span></p>
      </div>

      <div class="x:flex x:flex-col x:gap-2">
        <a
          href="{{ routes.cart_url }}"
          class="x:w-full x:text-center x:text-nowrap x:p-2 x:font-bold x:bg-black x:text-white"
          >VIEW CART & CHECKOUT</a
        >
        <button
          onclick="const drawer = document.querySelector('cart-drawer'); drawer.style.transform = 'translateY(-100%)'; setTimeout(() => drawer.style.display = 'none', 300);"
          class="x:w-full x:text-center x:text-nowrap x:p-2 x:font-bold x:bg-white x:border x:border-black"
        >
          CONTINUE SHOPPING
        </button>
      </div>
    </div>
  </div>

  <!-- You may also like section -->
  {% assign all_products = collections.all.products %}
  {% assign random_products = '' | split: '' %}
  {% assign max_products = 4 %}
  {% assign product_count = all_products.size %}

  {% if product_count > 0 %}
    {% for i in (1..max_products) %}
      {% assign random_index = 'now' | date: '%s' | plus: i | modulo: product_count %}
      {% assign random_product = all_products[random_index] %}
      {% unless cart.items contains random_product %}
        {% assign random_products = random_products | concat: random_product %}
      {% endunless %}
    {% endfor %}
  {% endif %}

  {% if random_products.size > 0 %}
    <div class="x:mt-8 x:border-t x:pt-8">
      <div class="x:flex x:items-center x:justify-between">
        <h3 class="x:text-lg x:font-bold x:mb-4">You may also like</h3>

        <div class="x:flex x:items-center x:gap-2">
          <div class="x:bg-white x:flex x:items-center x:justify-center x:cursor-pointer x:p-2 x:border x:border-black x:hover:scale-110 x:transition-all x:duration-300">
            {% render 'icon' with 'chevron-left', width: 20, height: 20 %}
          </div>
          <div class="x:bg-white x:flex x:items-center x:justify-center x:cursor-pointer x:p-2 x:border x:border-black x:hover:scale-110 x:transition-all x:duration-300">
            {% render 'icon' with 'chevron-right', width: 20, height: 20 %}
          </div>
        </div>
      </div>
      <div class="x:relative">
        <div class="x:flex x:gap-4 x:overflow-x-auto x:pb-4 x:scrollbar-hide">
          {% for product in random_products %}
            <div class="x:flex-shrink-0 x:w-[200px]">
              <img
                src="{{ product.featured_image | img_url: '200x200', crop: 'center' }}"
                alt="{{ product.title }}"
                width="200"
                height="200"
                class="x:w-full x:h-[200px] x:object-cover x:rounded"
              >
              <p class="x:mt-2 x:font-medium">{{ product.title }}</p>
              <p class="x:text-sm x:text-gray-600">{{ product.price | money }}</p>
            </div>
          {% endfor %}
        </div>
      </div>
    </div>
  {% endif %}
</cart-drawer>

<style>
  /* Hide top-left close button if present */
  cart-drawer button[aria-label='Close'],
  cart-drawer button.drawer__close-icon,
  cart-drawer button[is='close-button'] {
    display: none !important;
  }

  /* Ensure smooth transition */
  cart-drawer {
    transform: translateY(0);
    transition: transform 0.3s ease-in-out;
  }

  cart-drawer.x\:-translate-y-full {
    transform: translateY(-100%);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Function to show cart drawer
    function showCartDrawer() {
      const drawer = document.querySelector('cart-drawer');
      if (drawer) {
        drawer.style.display = 'block';
        // Force a reflow
        drawer.offsetHeight;
        drawer.style.transform = 'translateY(0)';
      }
    }

    // Function to update cart drawer content
    function updateCartDrawer() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          const drawer = document.querySelector('cart-drawer');
          if (drawer) {
            // Update item count
            const itemCountElements = drawer.querySelectorAll('[data-cart-count]');
            itemCountElements.forEach(el => {
              el.textContent = cart.item_count;
            });

            // Update subtotal
            const subtotalElements = drawer.querySelectorAll('[data-cart-subtotal]');
            subtotalElements.forEach(el => {
              el.textContent = (cart.total_price / 100).toFixed(2);
            });

            // Update cart items
            if (cart.items.length > 0) {
              const firstItem = cart.items[0];
              const itemImage = drawer.querySelector('[data-cart-item-image]');
              if (itemImage) {
                itemImage.src = firstItem.image;
                itemImage.alt = firstItem.title;
              }
            }

            // Show the drawer
            showCartDrawer();
          }
        })
        .catch(error => console.error('Error:', error));
    }

    // Function to add item to cart
    function addItemToCart(formData) {
      return fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        updateCartDrawer();
        return data;
      })
      .catch(error => {
        console.error('Error:', error);
        throw error;
      });
    }

    // Function to update cart item quantity
    function updateCartItemQuantity(line, quantity) {
      return fetch('/cart/change.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          line: line,
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(data => {
        updateCartDrawer();
        return data;
      })
      .catch(error => {
        console.error('Error:', error);
        throw error;
      });
    }

    // Function to remove cart item
    function removeCartItem(line) {
      return updateCartItemQuantity(line, 0);
    }

    // Listen for cart updates
    document.addEventListener('cart:updated', updateCartDrawer);
    document.addEventListener('cart:add', updateCartDrawer);

    // Listen for add to cart form submissions
    document.querySelectorAll('form[action="/cart/add"]').forEach(form => {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        addItemToCart(formData);
      });
    });

    // Listen for add to cart button clicks
    document.querySelectorAll('[data-add-to-cart]').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const form = this.closest('form[action="/cart/add"]');
        if (form) {
          const formData = new FormData(form);
          addItemToCart(formData);
        }
      });
    });

    // Listen for quantity changes
    document.querySelectorAll('[data-quantity-input]').forEach(input => {
      input.addEventListener('change', function(e) {
        const line = this.dataset.line;
        const quantity = parseInt(this.value);
        if (!isNaN(quantity)) {
          updateCartItemQuantity(line, quantity);
        }
      });
    });

    // Listen for remove item buttons
    document.querySelectorAll('[data-remove-item]').forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const line = this.dataset.line;
        removeCartItem(line);
      });
    });

    // Initialize cart drawer
    updateCartDrawer();
  });
</script>

{% schema %}
{
  "name": "Cart drawer",
  "settings": [
    {
      "type": "paragraph",
      "content": "Cart drawer won't appear to your customers if you have set the cart type to Page in the global theme settings."
    },
    {
      "type": "paragraph",
      "content": "Free shipping bar can be configured in global cart settings."
    },
    {
      "type": "checkbox",
      "id": "show_cart_note",
      "label": "Show cart note",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_shipping_text",
      "label": "Show shipping text",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_view_cart_button",
      "label": "Show view cart button",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_checkout_button",
      "label": "Show checkout button",
      "default": true
    },
    {
      "type": "header",
      "content": "Product recommendations"
    },
    {
      "type": "text",
      "id": "recommendations_title",
      "label": "Heading",
      "default": "Trending this month"
    },
    {
      "type": "product_list",
      "id": "products",
      "label": "Recommendations",
      "info": "Suggest additional products to your customers. Recommendations already in the cart are automatically hidden.",
      "limit": 10
    },
    {
      "type": "color",
      "id": "product_card_background",
      "label": "Product card background"
    },
    {
      "type": "color",
      "id": "product_card_text_color",
      "label": "Product card text"
    }
  ]
}
{% endschema %}
