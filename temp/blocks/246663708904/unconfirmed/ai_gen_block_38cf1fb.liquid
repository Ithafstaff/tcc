{% doc %}
  @prompt
    a cart drawer that comes from the top instead of the side

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-cart-drawer-{{ ai_gen_id }} {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    max-height: 80vh;
    background-color: {{ block.settings.background_color }};
    color: {{ block.settings.text_color }};
    z-index: 1000;
    transform: translateY(-100%);
    transition: transform 0.3s ease-in-out;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    border-bottom-left-radius: {{ block.settings.border_radius }}px;
    border-bottom-right-radius: {{ block.settings.border_radius }}px;
    overflow-y: auto;
  }

  .ai-cart-drawer-{{ ai_gen_id }}.open {
    transform: translateY(0);
  }

  .ai-cart-drawer-header-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid {{ block.settings.border_color }};
  }

  .ai-cart-drawer-title-{{ ai_gen_id }} {
    font-size: 18px;
    font-weight: 600;
    margin: 0;
  }

  .ai-cart-drawer-close-{{ ai_gen_id }} {
    background: none;
    border: none;
    cursor: pointer;
    padding: 5px;
    color: {{ block.settings.text_color }};
  }

  .ai-cart-drawer-content-{{ ai_gen_id }} {
    padding: 20px;
  }

  .ai-cart-drawer-empty-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
  }

  .ai-cart-drawer-empty-message-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-cart-drawer-continue-{{ ai_gen_id }} {
    display: inline-block;
    padding: 10px 20px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    text-decoration: none;
    border-radius: {{ block.settings.button_border_radius }}px;
  }

  .ai-cart-drawer-items-{{ ai_gen_id }} {
    margin-bottom: 20px;
    max-height: 50vh;
    overflow-y: auto;
  }

  .ai-cart-drawer-item-{{ ai_gen_id }} {
    display: flex;
    padding: 15px 0;
    border-bottom: 1px solid {{ block.settings.border_color }};
  }

  .ai-cart-drawer-item-image-{{ ai_gen_id }} {
    width: 80px;
    height: 80px;
    flex-shrink: 0;
    margin-right: 15px;
  }

  .ai-cart-drawer-item-image-{{ ai_gen_id }} img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-cart-drawer-item-details-{{ ai_gen_id }} {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .ai-cart-drawer-item-title-{{ ai_gen_id }} {
    font-weight: 500;
    margin-bottom: 5px;
  }

  .ai-cart-drawer-item-variant-{{ ai_gen_id }} {
    font-size: 14px;
    color: {{ block.settings.secondary_text_color }};
    margin-bottom: 5px;
  }

  .ai-cart-drawer-item-price-{{ ai_gen_id }} {
    font-weight: 500;
  }

  .ai-cart-drawer-item-quantity-{{ ai_gen_id }} {
    display: flex;
    align-items: center;
    margin-top: 10px;
  }

  .ai-cart-drawer-quantity-button-{{ ai_gen_id }} {
    background: none;
    border: 1px solid {{ block.settings.border_color }};
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .ai-cart-drawer-quantity-input-{{ ai_gen_id }} {
    width: 40px;
    height: 30px;
    text-align: center;
    border: 1px solid {{ block.settings.border_color }};
    border-left: none;
    border-right: none;
  }

  .ai-cart-drawer-item-remove-{{ ai_gen_id }} {
    background: none;
    border: none;
    color: {{ block.settings.secondary_text_color }};
    text-decoration: underline;
    cursor: pointer;
    padding: 0;
    margin-top: 10px;
    font-size: 14px;
    align-self: flex-start;
  }

  .ai-cart-drawer-footer-{{ ai_gen_id }} {
    padding: 20px;
    border-top: 1px solid {{ block.settings.border_color }};
  }

  .ai-cart-drawer-subtotal-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    font-weight: 600;
  }

  .ai-cart-drawer-checkout-{{ ai_gen_id }} {
    display: block;
    width: 100%;
    padding: 15px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    text-align: center;
    text-decoration: none;
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-weight: 600;
    cursor: pointer;
    margin-bottom: 10px;
  }

  .ai-cart-drawer-continue-shopping-{{ ai_gen_id }} {
    display: block;
    width: 100%;
    padding: 15px;
    background-color: transparent;
    color: {{ block.settings.text_color }};
    text-align: center;
    text-decoration: none;
    border: 1px solid {{ block.settings.border_color }};
    border-radius: {{ block.settings.button_border_radius }}px;
    font-weight: 600;
    cursor: pointer;
  }

  .ai-cart-drawer-overlay-{{ ai_gen_id }} {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
  }

  .ai-cart-drawer-overlay-{{ ai_gen_id }}.open {
    opacity: 1;
    visibility: visible;
  }

  .ai-cart-drawer-trigger-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    background: {{ block.settings.cart_icon_background }};
    color: {{ block.settings.cart_icon_color }};
    border: none;
    padding: 10px 15px;
    border-radius: {{ block.settings.button_border_radius }}px;
    cursor: pointer;
  }

  .ai-cart-drawer-trigger-icon-{{ ai_gen_id }} {
    margin-right: 8px;
  }

  .ai-cart-drawer-trigger-count-{{ ai_gen_id }} {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background-color: {{ block.settings.cart_count_background }};
    color: {{ block.settings.cart_count_color }};
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 12px;
    margin-left: 5px;
  }

  .ai-cart-drawer-shipping-bar-{{ ai_gen_id }} {
    margin-bottom: 20px;
  }

  .ai-cart-drawer-shipping-message-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 10px;
  }

  .ai-cart-drawer-shipping-progress-{{ ai_gen_id }} {
    height: 8px;
    background-color: {{ block.settings.progress_bar_background }};
    border-radius: 4px;
    overflow: hidden;
  }

  .ai-cart-drawer-shipping-progress-fill-{{ ai_gen_id }} {
    height: 100%;
    background-color: {{ block.settings.progress_bar_fill }};
    transition: width 0.3s ease;
  }

  @media screen and (max-width: 767px) {
    .ai-cart-drawer-{{ ai_gen_id }} {
      max-height: 90vh;
    }
  }
{% endstyle %}

<top-cart-drawer-{{ ai_gen_id }} {{ block.shopify_attributes }}>
  <button class="ai-cart-drawer-trigger-{{ ai_gen_id }}" aria-label="Open cart" aria-expanded="false">
    <span class="ai-cart-drawer-trigger-icon-{{ ai_gen_id }}">
      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M6 16C4.9 16 4.01 16.9 4.01 18C4.01 19.1 4.9 20 6 20C7.1 20 8 19.1 8 18C8 16.9 7.1 16 6 16ZM0 0V2H2L5.6 9.59L4.2 12.04C4.08 12.32 4 12.65 4 13C4 14.1 4.9 15 6 15H18V13H6.42C6.28 13 6.17 12.89 6.17 12.75L6.2 12.63L7.1 11H14.55C15.3 11 15.96 10.59 16.3 9.97L19.88 3.48C19.96 3.34 20 3.17 20 3C20 2.45 19.55 2 19 2H4.21L3.27 0H0ZM16 16C14.9 16 14.01 16.9 14.01 18C14.01 19.1 14.9 20 16 20C17.1 20 18 19.1 18 18C18 16.9 17.1 16 16 16Z" fill="currentColor"/>
      </svg>
    </span>
    <span>{{ block.settings.cart_button_text }}</span>
    <span class="ai-cart-drawer-trigger-count-{{ ai_gen_id }}">0</span>
  </button>

  <div class="ai-cart-drawer-overlay-{{ ai_gen_id }}"></div>

  <div class="ai-cart-drawer-{{ ai_gen_id }}" role="dialog" aria-modal="true" aria-labelledby="cart-drawer-heading-{{ ai_gen_id }}">
    <div class="ai-cart-drawer-header-{{ ai_gen_id }}">
      <h2 id="cart-drawer-heading-{{ ai_gen_id }}" class="ai-cart-drawer-title-{{ ai_gen_id }}">{{ block.settings.drawer_title }}</h2>
      <button class="ai-cart-drawer-close-{{ ai_gen_id }}" aria-label="Close cart">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z" fill="currentColor"/>
        </svg>
      </button>
    </div>
    
    <div class="ai-cart-drawer-content-{{ ai_gen_id }}">
      <div class="ai-cart-drawer-empty-{{ ai_gen_id }}" style="display: none;">
        <p class="ai-cart-drawer-empty-message-{{ ai_gen_id }}">{{ block.settings.empty_cart_message }}</p>
        <a href="{{ block.settings.continue_shopping_link }}" class="ai-cart-drawer-continue-{{ ai_gen_id }}">{{ block.settings.continue_shopping_text }}</a>
      </div>
      
      <div class="ai-cart-drawer-items-container-{{ ai_gen_id }}">
        {% if block.settings.show_shipping_bar %}
        <div class="ai-cart-drawer-shipping-bar-{{ ai_gen_id }}">
          <p class="ai-cart-drawer-shipping-message-{{ ai_gen_id }}"></p>
          <div class="ai-cart-drawer-shipping-progress-{{ ai_gen_id }}">
            <div class="ai-cart-drawer-shipping-progress-fill-{{ ai_gen_id }}" style="width: 0%;"></div>
          </div>
        </div>
        {% endif %}
        
        <div class="ai-cart-drawer-items-{{ ai_gen_id }}"></div>
        
        <div class="ai-cart-drawer-footer-{{ ai_gen_id }}">
          <div class="ai-cart-drawer-subtotal-{{ ai_gen_id }}">
            <span>{{ block.settings.subtotal_text }}</span>
            <span class="ai-cart-drawer-subtotal-value-{{ ai_gen_id }}"></span>
          </div>
          
          <button class="ai-cart-drawer-checkout-{{ ai_gen_id }}">{{ block.settings.checkout_text }}</button>
          <button class="ai-cart-drawer-continue-shopping-{{ ai_gen_id }}">{{ block.settings.continue_shopping_text }}</button>
        </div>
      </div>
    </div>
  </div>
</top-cart-drawer-{{ ai_gen_id }}>

<script>
  (function() {
    class TopCartDrawer extends HTMLElement {
      constructor() {
        super();
        this.drawer = this.querySelector('.ai-cart-drawer-{{ ai_gen_id }}');
        this.overlay = this.querySelector('.ai-cart-drawer-overlay-{{ ai_gen_id }}');
        this.trigger = this.querySelector('.ai-cart-drawer-trigger-{{ ai_gen_id }}');
        this.closeButton = this.querySelector('.ai-cart-drawer-close-{{ ai_gen_id }}');
        this.continueShoppingButton = this.querySelector('.ai-cart-drawer-continue-shopping-{{ ai_gen_id }}');
        this.checkoutButton = this.querySelector('.ai-cart-drawer-checkout-{{ ai_gen_id }}');
        this.emptyCartContainer = this.querySelector('.ai-cart-drawer-empty-{{ ai_gen_id }}');
        this.itemsContainer = this.querySelector('.ai-cart-drawer-items-{{ ai_gen_id }}');
        this.subtotalValue = this.querySelector('.ai-cart-drawer-subtotal-value-{{ ai_gen_id }}');
        this.cartCount = this.querySelector('.ai-cart-drawer-trigger-count-{{ ai_gen_id }}');
        
        {% if block.settings.show_shipping_bar %}
        this.shippingMessage = this.querySelector('.ai-cart-drawer-shipping-message-{{ ai_gen_id }}');
        this.shippingProgressFill = this.querySelector('.ai-cart-drawer-shipping-progress-fill-{{ ai_gen_id }}');
        this.freeShippingThreshold = {{ block.settings.free_shipping_threshold }};
        {% endif %}
        
        this.cart = null;
        this.isOpen = false;
        
        this.init();
      }
      
      init() {
        this.fetchCart();
        this.bindEvents();
      }
      
      bindEvents() {
        this.trigger.addEventListener('click', this.openDrawer.bind(this));
        this.closeButton.addEventListener('click', this.closeDrawer.bind(this));
        this.overlay.addEventListener('click', this.closeDrawer.bind(this));
        this.continueShoppingButton.addEventListener('click', this.closeDrawer.bind(this));
        this.checkoutButton.addEventListener('click', this.goToCheckout.bind(this));
        
        // Close with ESC key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.isOpen) {
            this.closeDrawer();
          }
        });
        
        // Listen for cart updates
        document.addEventListener('cart:refresh', this.fetchCart.bind(this));
      }
      
      openDrawer() {
        this.isOpen = true;
        this.drawer.classList.add('open');
        this.overlay.classList.add('open');
        this.trigger.setAttribute('aria-expanded', 'true');
        document.body.style.overflow = 'hidden';
        this.fetchCart();
      }
      
      closeDrawer() {
        this.isOpen = false;
        this.drawer.classList.remove('open');
        this.overlay.classList.remove('open');
        this.trigger.setAttribute('aria-expanded', 'false');
        document.body.style.overflow = '';
      }
      
      async fetchCart() {
        try {
          const response = await fetch('/cart.js');
          if (!response.ok) throw new Error('Failed to fetch cart');
          
          this.cart = await response.json();
          this.updateCartUI();
        } catch (error) {
          console.error('Error fetching cart:', error);
        }
      }
      
      updateCartUI() {
        if (!this.cart) return;
        
        // Update cart count
        this.cartCount.textContent = this.cart.item_count;
        
        // Show empty cart or items
        if (this.cart.item_count === 0) {
          this.emptyCartContainer.style.display = 'block';
          this.querySelector('.ai-cart-drawer-items-container-{{ ai_gen_id }}').style.display = 'none';
        } else {
          this.emptyCartContainer.style.display = 'none';
          this.querySelector('.ai-cart-drawer-items-container-{{ ai_gen_id }}').style.display = 'block';
          
          // Update items
          this.renderCartItems();
          
          // Update subtotal
          this.subtotalValue.textContent = this.formatMoney(this.cart.total_price);
          
          {% if block.settings.show_shipping_bar %}
          // Update shipping bar
          this.updateShippingBar();
          {% endif %}
        }
      }
      
      renderCartItems() {
        this.itemsContainer.innerHTML = '';
        
        this.cart.items.forEach(item => {
          const itemElement = document.createElement('div');
          itemElement.className = 'ai-cart-drawer-item-{{ ai_gen_id }}';
          
          const imageUrl = item.image ? item.image.replace(/(\.[^.]*)$/, '_100x$1') : '';
          
          itemElement.innerHTML = `
            <div class="ai-cart-drawer-item-image-{{ ai_gen_id }}">
              ${imageUrl ? `<img src="${imageUrl}" alt="${item.title}">` : 
                `<div class="ai-cart-drawer-item-image-placeholder-{{ ai_gen_id }}">
                  <svg viewBox="0 0 100 100" fill="#e5e5e5">
                    <rect width="100" height="100"/>
                  </svg>
                </div>`
              }
            </div>
            <div class="ai-cart-drawer-item-details-{{ ai_gen_id }}">
              <div class="ai-cart-drawer-item-title-{{ ai_gen_id }}">${item.title}</div>
              ${item.variant_title ? `<div class="ai-cart-drawer-item-variant-{{ ai_gen_id }}">${item.variant_title}</div>` : ''}
              <div class="ai-cart-drawer-item-price-{{ ai_gen_id }}">${this.formatMoney(item.price)}</div>
              <div class="ai-cart-drawer-item-quantity-{{ ai_gen_id }}">
                <button class="ai-cart-drawer-quantity-button-{{ ai_gen_id }} decrease" data-id="${item.key}" ${item.quantity <= 1 ? 'disabled' : ''}>-</button>
                <input type="number" class="ai-cart-drawer-quantity-input-{{ ai_gen_id }}" value="${item.quantity}" min="1" data-id="${item.key}" aria-label="Quantity">
                <button class="ai-cart-drawer-quantity-button-{{ ai_gen_id }} increase" data-id="${item.key}">+</button>
              </div>
              <button class="ai-cart-drawer-item-remove-{{ ai_gen_id }}" data-id="${item.key}">Remove</button>
            </div>
          `;
          
          // Add event listeners for quantity buttons
          const decreaseBtn = itemElement.querySelector('.decrease');
          const increaseBtn = itemElement.querySelector('.increase');
          const quantityInput = itemElement.querySelector('input');
          const removeBtn = itemElement.querySelector('.ai-cart-drawer-item-remove-{{ ai_gen_id }}');
          
          decreaseBtn.addEventListener('click', () => this.updateItemQuantity(item.key, item.quantity - 1));
          increaseBtn.addEventListener('click', () => this.updateItemQuantity(item.key, item.quantity + 1));
          quantityInput.addEventListener('change', (e) => this.updateItemQuantity(item.key, parseInt(e.target.value)));
          removeBtn.addEventListener('click', () => this.updateItemQuantity(item.key, 0));
          
          this.itemsContainer.appendChild(itemElement);
        });
      }
      
      {% if block.settings.show_shipping_bar %}
      updateShippingBar() {
        const cartTotal = this.cart.total_price / 100;
        const remainingForFreeShipping = Math.max(0, this.freeShippingThreshold - cartTotal);
        const progressPercentage = Math.min(100, (cartTotal / this.freeShippingThreshold) * 100);
        
        this.shippingProgressFill.style.width = `${progressPercentage}%`;
        
        if (remainingForFreeShipping > 0) {
          this.shippingMessage.textContent = `Add ${this.formatMoney(remainingForFreeShipping * 100)} more for free shipping!`;
        } else {
          this.shippingMessage.textContent = "You've unlocked free shipping!";
        }
      }
      {% endif %}
      
      async updateItemQuantity(id, quantity) {
        try {
          const response = await fetch('/cart/change.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id,
              quantity
            })
          });
          
          if (!response.ok) throw new Error('Failed to update cart');
          
          this.cart = await response.json();
          this.updateCartUI();
          
        } catch (error) {
          console.error('Error updating cart:', error);
        }
      }
      
      goToCheckout() {
        window.location.href = '/checkout';
      }
      
      formatMoney(cents) {
        const value = (cents / 100).toFixed(2);
        return `$${value}`;
      }
    }
    
    customElements.define('top-cart-drawer-{{ ai_gen_id }}', TopCartDrawer);
  })();
</script>

{% schema %}
{
  "name": "Top Cart Drawer",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Cart Button"
    },
    {
      "type": "text",
      "id": "cart_button_text",
      "label": "Cart button text",
      "default": "Cart"
    },
    {
      "type": "color",
      "id": "cart_icon_background",
      "label": "Cart button background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "cart_icon_color",
      "label": "Cart button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "cart_count_background",
      "label": "Cart count background",
      "default": "#ff0000"
    },
    {
      "type": "color",
      "id": "cart_count_color",
      "label": "Cart count text color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Drawer Settings"
    },
    {
      "type": "text",
      "id": "drawer_title",
      "label": "Drawer title",
      "default": "Your Cart"
    },
    {
      "type": "text",
      "id": "empty_cart_message",
      "label": "Empty cart message",
      "default": "Your cart is currently empty"
    },
    {
      "type": "text",
      "id": "subtotal_text",
      "label": "Subtotal text",
      "default": "Subtotal"
    },
    {
      "type": "text",
      "id": "checkout_text",
      "label": "Checkout button text",
      "default": "Checkout"
    },
    {
      "type": "text",
      "id": "continue_shopping_text",
      "label": "Continue shopping text",
      "default": "Continue shopping"
    },
    {
      "type": "url",
      "id": "continue_shopping_link",
      "label": "Continue shopping link",
      "default": "/collections/all"
    },
    {
      "type": "header",
      "content": "Free Shipping Bar"
    },
    {
      "type": "checkbox",
      "id": "show_shipping_bar",
      "label": "Show free shipping progress bar",
      "default": true
    },
    {
      "type": "text",
      "id": "free_shipping_threshold",
      "label": "Free shipping threshold",
      "info": "Enter amount without currency symbol",
      "default": "100"
    },
    {
      "type": "color",
      "id": "progress_bar_background",
      "label": "Progress bar background",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "progress_bar_fill",
      "label": "Progress bar fill",
      "default": "#4CAF50"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "secondary_text_color",
      "label": "Secondary text color",
      "default": "#777777"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "#e5e5e5"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Drawer border radius",
      "default": 0
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button border radius",
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "Top Cart Drawer"
    }
  ]
}
{% endschema %}